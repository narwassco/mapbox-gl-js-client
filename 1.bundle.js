(window.webpackJsonp=window.webpackJsonp||[]).push([[1],Array(150).concat([function(t,e,r){"use strict";r.r(e),function(t,i){r.d(e,"AElement",(function(){return Ht})),r.d(e,"AnimateColorElement",(function(){return Dt})),r.d(e,"AnimateElement",(function(){return Lt})),r.d(e,"AnimateTransformElement",(function(){return Bt})),r.d(e,"BoundingBox",(function(){return gt})),r.d(e,"CB1",(function(){return L})),r.d(e,"CB2",(function(){return D})),r.d(e,"CB3",(function(){return B})),r.d(e,"CB4",(function(){return j})),r.d(e,"Canvg",(function(){return be})),r.d(e,"CircleElement",(function(){return Tt})),r.d(e,"ClipPathElement",(function(){return se})),r.d(e,"DefsElement",(function(){return Nt})),r.d(e,"DescElement",(function(){return ge})),r.d(e,"Document",(function(){return ye})),r.d(e,"Element",(function(){return ot})),r.d(e,"EllipseElement",(function(){return At})),r.d(e,"FeColorMatrixElement",(function(){return ie})),r.d(e,"FeCompositeElement",(function(){return ce})),r.d(e,"FeDropShadowElement",(function(){return ue})),r.d(e,"FeGaussianBlurElement",(function(){return le})),r.d(e,"FeMorphologyElement",(function(){return he})),r.d(e,"FilterElement",(function(){return oe})),r.d(e,"Font",(function(){return ft})),r.d(e,"FontElement",(function(){return jt})),r.d(e,"FontFaceElement",(function(){return zt})),r.d(e,"GElement",(function(){return _t})),r.d(e,"GlyphElement",(function(){return yt})),r.d(e,"GradientElement",(function(){return Vt})),r.d(e,"ImageElement",(function(){return Gt})),r.d(e,"LineElement",(function(){return Ot})),r.d(e,"LinearGradientElement",(function(){return Rt})),r.d(e,"MarkerElement",(function(){return Mt})),r.d(e,"MaskElement",(function(){return ne})),r.d(e,"Matrix",(function(){return rt})),r.d(e,"MissingGlyphElement",(function(){return Ft})),r.d(e,"Mouse",(function(){return q})),r.d(e,"PSEUDO_ZERO",(function(){return V})),r.d(e,"Parser",(function(){return K})),r.d(e,"PathElement",(function(){return vt})),r.d(e,"PathParser",(function(){return pt})),r.d(e,"PatternElement",(function(){return Ct})),r.d(e,"Point",(function(){return Y})),r.d(e,"PolygonElement",(function(){return Et})),r.d(e,"PolylineElement",(function(){return Pt})),r.d(e,"Property",(function(){return H})),r.d(e,"QB1",(function(){return z})),r.d(e,"QB2",(function(){return F})),r.d(e,"QB3",(function(){return U})),r.d(e,"RadialGradientElement",(function(){return kt})),r.d(e,"RectElement",(function(){return St})),r.d(e,"RenderedElement",(function(){return dt})),r.d(e,"Rotate",(function(){return tt})),r.d(e,"SVGElement",(function(){return wt})),r.d(e,"SVGFontLoader",(function(){return $t})),r.d(e,"Scale",(function(){return et})),r.d(e,"Screen",(function(){return Q})),r.d(e,"Skew",(function(){return it})),r.d(e,"SkewX",(function(){return nt})),r.d(e,"SkewY",(function(){return at})),r.d(e,"StopElement",(function(){return It})),r.d(e,"StyleElement",(function(){return Zt})),r.d(e,"SymbolElement",(function(){return Qt})),r.d(e,"TRefElement",(function(){return Ut})),r.d(e,"TSpanElement",(function(){return xt})),r.d(e,"TextElement",(function(){return mt})),r.d(e,"TextPathElement",(function(){return qt})),r.d(e,"TitleElement",(function(){return fe})),r.d(e,"Transform",(function(){return st})),r.d(e,"Translate",(function(){return J})),r.d(e,"UnknownElement",(function(){return ut})),r.d(e,"UseElement",(function(){return Kt})),r.d(e,"ViewPort",(function(){return X})),r.d(e,"compressSpaces",(function(){return d})),r.d(e,"getSelectorSpecificity",(function(){return _})),r.d(e,"normalizeAttributeName",(function(){return b})),r.d(e,"normalizeColor",(function(){return S})),r.d(e,"parseExternalUrl",(function(){return w})),r.d(e,"presets",(function(){return p})),r.d(e,"toNumbers",(function(){return m})),r.d(e,"trimLeft",(function(){return v})),r.d(e,"trimRight",(function(){return y})),r.d(e,"vectorMagnitude",(function(){return R})),r.d(e,"vectorsAngle",(function(){return I})),r.d(e,"vectorsRatio",(function(){return k}));r(232);var n=r(262),a=r.n(n),s=(r(263),r(270),r(272),r(227),r(277),r(280)),o=r.n(s),u=(r(281),r(283),r(284),r(285)),h=r.n(u),c=(r(287),r(290)),l=r.n(c),f=(r(291),r(292),r(293),r(295)),g=(r(296),r(297));var p=Object.freeze({__proto__:null,offscreen:function(){var{DOMParser:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:t,createCanvas:(t,e)=>new OffscreenCanvas(t,e),createImage:t=>a()((function*(){var e=yield fetch(t),r=yield e.blob();return yield createImageBitmap(r)}))()};return"undefined"==typeof DOMParser&&void 0!==t||Reflect.deleteProperty(e,"DOMParser"),e},node:function(t){var{DOMParser:e,canvas:r,fetch:i}=t;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,fetch:i,createCanvas:r.createCanvas,createImage:r.loadImage}}});function d(t){return t.replace(/(?!\u3000)\s+/gm," ")}function v(t){return t.replace(/^[\n \t]+/,"")}function y(t){return t.replace(/[\n \t]+$/,"")}function m(t){return((t||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var x=/^[A-Z-]+$/;function b(t){return x.test(t)?t.toLowerCase():t}function w(t){var e=/url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(t)||[];return e[2]||e[3]||e[4]}function S(t){if(!t.startsWith("rgb"))return t;var e=3;return t.replace(/\d+(\.\d+)?/g,(t,r)=>e--&&r?String(Math.round(parseFloat(t))):t)}var T=/(\[[^\]]+\])/g,A=/(#[^\s+>~.[:]+)/g,O=/(\.[^\s+>~.[:]+)/g,P=/(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi,E=/(:[\w-]+\([^)]*\))/gi,C=/(:[^\s+>~.[:]+)/g,M=/([^\s+>~.[:]+)/g;function N(t,e){var r=e.exec(t);return r?[t.replace(e," "),r.length]:[t,0]}function _(t){var e=[0,0,0],r=t.replace(/:not\(([^)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),i=0;return[r,i]=N(r,T),e[1]+=i,[r,i]=N(r,A),e[0]+=i,[r,i]=N(r,O),e[1]+=i,[r,i]=N(r,P),e[2]+=i,[r,i]=N(r,E),e[1]+=i,[r,i]=N(r,C),e[1]+=i,r=r.replace(/[*\s+>~]/g," ").replace(/[#.]/g," "),[r,i]=N(r,M),e[2]+=i,e.join("")}var V=1e-8;function R(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2))}function k(t,e){return(t[0]*e[0]+t[1]*e[1])/(R(t)*R(e))}function I(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(k(t,e))}function L(t){return t*t*t}function D(t){return 3*t*t*(1-t)}function B(t){return 3*t*(1-t)*(1-t)}function j(t){return(1-t)*(1-t)*(1-t)}function z(t){return t*t}function F(t){return 2*t*(1-t)}function U(t){return(1-t)*(1-t)}class H{constructor(t,e,r){this.document=t,this.name=e,this.value=r,this.isNormalizedColor=!1}static empty(t){return new H(t,"EMPTY","")}split(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",{document:e,name:r}=this;return d(this.getString()).trim().split(t).map(t=>new H(e,r,t))}hasValue(t){var{value:e}=this;return null!==e&&""!==e&&(t||0!==e)&&void 0!==e}isString(t){var{value:e}=this,r="string"==typeof e;return r&&t?t.test(e):r}isUrlDefinition(){return this.isString(/^url\(/)}isPixels(){if(!this.hasValue())return!1;var t=this.getString();switch(!0){case t.endsWith("px"):case/^[0-9]+$/.test(t):return!0;default:return!1}}setValue(t){return this.value=t,this}getValue(t){return void 0===t||this.hasValue()?this.value:t}getNumber(t){if(!this.hasValue())return void 0===t?0:parseFloat(t);var{value:e}=this,r=parseFloat(e);return this.isString(/%$/)&&(r/=100),r}getString(t){return void 0===t||this.hasValue()?void 0===this.value?"":String(this.value):String(t)}getColor(t){var e=this.getString(t);return this.isNormalizedColor||(this.isNormalizedColor=!0,e=S(e),this.value=e),e}getDpi(){return 96}getRem(){return this.document.rootEmSize}getEm(){return this.document.emSize}getUnits(){return this.getString().replace(/[0-9.-]/g,"")}getPixels(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var[r,i]="boolean"==typeof t?[void 0,t]:[t],{viewPort:n}=this.document.screen;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(n.computeSize("x"),n.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(n.computeSize("x"),n.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*n.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*n.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&i:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*n.computeSize(r);default:var a=this.getNumber();return e&&a<1?a*n.computeSize(r):a}}getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}getDefinition(){var t=this.getString(),e=/#([^)'"]+)/.exec(t);return e&&(e=e[1]),e||(e=t),this.document.definitions[e]}getFillStyleDefinition(t,e){var r=this.getDefinition();if(!r)return null;if("function"==typeof r.createGradient)return r.createGradient(this.document.ctx,t,e);if("function"==typeof r.createPattern){if(r.getHrefAttribute().hasValue()){var i=r.getAttribute("patternTransform");r=r.getHrefAttribute().getDefinition(),i.hasValue()&&r.getAttribute("patternTransform",!0).setValue(i.value)}return r.createPattern(this.document.ctx,t,e)}return null}getTextBaseline(){return this.hasValue()?H.textBaselineMapping[this.getString()]:null}addOpacity(t){for(var e=this.getColor(),r=e.length,i=0,n=0;n<r&&(","===e[n]&&i++,3!==i);n++);if(t.hasValue()&&this.isString()&&3!==i){var a=new l.a(e);a.ok&&(a.alpha=t.getNumber(),e=a.toRGBA())}return new H(this.document,this.name,e)}}H.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};class X{constructor(){this.viewPorts=[]}clear(){this.viewPorts=[]}setCurrent(t,e){this.viewPorts.push({width:t,height:e})}removeCurrent(){this.viewPorts.pop()}getCurrent(){var{viewPorts:t}=this;return t[t.length-1]}get width(){return this.getCurrent().width}get height(){return this.getCurrent().height}computeSize(t){return"number"==typeof t?t:"x"===t?this.width:"y"===t?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}}class Y{constructor(t,e){this.x=t,this.y=e}static parse(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,[r=e,i=e]=m(t);return new Y(r,i)}static parseScale(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,[r=e,i=r]=m(t);return new Y(r,i)}static parsePath(t){for(var e=m(t),r=e.length,i=[],n=0;n<r;n+=2)i.push(new Y(e[n],e[n+1]));return i}angleTo(t){return Math.atan2(t.y-this.y,t.x-this.x)}applyTransform(t){var{x:e,y:r}=this,i=e*t[0]+r*t[2]+t[4],n=e*t[1]+r*t[3]+t[5];this.x=i,this.y=n}}class q{constructor(t){this.screen=t,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}isWorking(){return this.working}start(){if(!this.working){var{screen:t,onClick:e,onMouseMove:r}=this,i=t.ctx.canvas;i.onclick=e,i.onmousemove=r,this.working=!0}}stop(){if(this.working){var t=this.screen.ctx.canvas;this.working=!1,t.onclick=null,t.onmousemove=null}}hasEvents(){return this.working&&this.events.length>0}runEvents(){if(this.working){var{screen:t,events:e,eventElements:r}=this,{style:i}=t.ctx.canvas;i&&(i.cursor=""),e.forEach((t,e)=>{for(var{run:i}=t,n=r[e];n;)i(n),n=n.parent}),this.events=[],this.eventElements=[]}}checkPath(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInPath&&e.isPointInPath(a,s)&&(i[n]=t)})}}checkBoundingBox(t,e){if(this.working&&e){var{events:r,eventElements:i}=this;r.forEach((r,n)=>{var{x:a,y:s}=r;!i[n]&&e.isPointInBox(a,s)&&(i[n]=t)})}}mapXY(t,e){for(var{window:r,ctx:i}=this.screen,n=new Y(t,e),a=i.canvas;a;)n.x-=a.offsetLeft,n.y-=a.offsetTop,a=a.offsetParent;return r.scrollX&&(n.x+=r.scrollX),r.scrollY&&(n.y+=r.scrollY),n}onClick(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onclick",x:e,y:r,run(t){t.onClick&&t.onClick()}})}onMouseMove(t){var{x:e,y:r}=this.mapXY(t.clientX,t.clientY);this.events.push({type:"onmousemove",x:e,y:r,run(t){t.onMouseMove&&t.onMouseMove()}})}}var W="undefined"!=typeof window?window:null,G="undefined"!=typeof fetch?fetch.bind(void 0):null;class Q{constructor(t){var{fetch:e=G,window:r=W}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.ctx=t,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new X,this.mouse=new q(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=r,this.fetch=e}wait(t){this.waits.push(t)}ready(){return this.readyPromise?this.readyPromise:t.resolve()}isReady(){if(this.isReadyLock)return!0;var t=this.waits.every(t=>t());return t&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=t,t}setDefaults(t){t.strokeStyle="rgba(0,0,0,0)",t.lineCap="butt",t.lineJoin="miter",t.miterLimit=4}setViewBox(t){var{document:e,ctx:r,aspectRatio:i,width:n,desiredWidth:a,height:s,desiredHeight:o,minX:u=0,minY:h=0,refX:c,refY:l,clip:f=!1,clipX:g=0,clipY:p=0}=t,v=d(i).replace(/^defer\s/,""),[y,m]=v.split(" "),x=y||"xMidYMid",b=m||"meet",w=n/a,S=s/o,T=Math.min(w,S),A=Math.max(w,S),O=a,P=o;"meet"===b&&(O*=T,P*=T),"slice"===b&&(O*=A,P*=A);var E=new H(e,"refX",c),C=new H(e,"refY",l),M=E.hasValue()&&C.hasValue();if(M&&r.translate(-T*E.getPixels("x"),-T*C.getPixels("y")),f){var N=T*g,_=T*p;r.beginPath(),r.moveTo(N,_),r.lineTo(n,_),r.lineTo(n,s),r.lineTo(N,s),r.closePath(),r.clip()}if(!M){var V="meet"===b&&T===S,R="slice"===b&&A===S,k="meet"===b&&T===w,I="slice"===b&&A===w;x.startsWith("xMid")&&(V||R)&&r.translate(n/2-O/2,0),x.endsWith("YMid")&&(k||I)&&r.translate(0,s/2-P/2),x.startsWith("xMax")&&(V||R)&&r.translate(n-O,0),x.endsWith("YMax")&&(k||I)&&r.translate(0,s-P)}switch(!0){case"none"===x:r.scale(w,S);break;case"meet"===b:r.scale(T,T);break;case"slice"===b:r.scale(A,A)}r.translate(-u,-h)}start(e){var{enableRedraw:r=!1,ignoreMouse:i=!1,ignoreAnimation:n=!1,ignoreDimensions:a=!1,ignoreClear:s=!1,forceRedraw:o,scaleWidth:u,scaleHeight:c,offsetX:l,offsetY:f}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{FRAMERATE:g,mouse:p}=this,d=1e3/g;if(this.frameDuration=d,this.readyPromise=new t(t=>{this.resolveReady=t}),this.isReady()&&this.render(e,a,s,u,c,l,f),r){var v=Date.now(),y=v,m=0,x=()=>{v=Date.now(),(m=v-y)>=d&&(y=v-m%d,this.shouldUpdate(n,o)&&(this.render(e,a,s,u,c,l,f),p.runEvents())),this.intervalId=h()(x)};i||p.start(),this.intervalId=h()(x)}}stop(){this.intervalId&&(h.a.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}shouldUpdate(t,e){if(!t){var{frameDuration:r}=this;if(this.animations.reduce((t,e)=>e.update(r)||t,!1))return!0}return!("function"!=typeof e||!e())||(!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents())}render(t,e,r,i,n,a,s){var{CLIENT_WIDTH:o,CLIENT_HEIGHT:u,viewPort:h,ctx:c,isFirstRender:l}=this,f=c.canvas;h.clear(),f.width&&f.height?h.setCurrent(f.width,f.height):h.setCurrent(o,u);var g=t.getStyle("width"),p=t.getStyle("height");!e&&(l||"number"!=typeof i&&"number"!=typeof n)&&(g.hasValue()&&(f.width=g.getPixels("x"),f.style&&(f.style.width="".concat(f.width,"px"))),p.hasValue()&&(f.height=p.getPixels("y"),f.style&&(f.style.height="".concat(f.height,"px"))));var d=f.clientWidth||f.width,v=f.clientHeight||f.height;if(e&&g.hasValue()&&p.hasValue()&&(d=g.getPixels("x"),v=p.getPixels("y")),h.setCurrent(d,v),"number"==typeof a&&t.getAttribute("x",!0).setValue(a),"number"==typeof s&&t.getAttribute("y",!0).setValue(s),"number"==typeof i||"number"==typeof n){var y=m(t.getAttribute("viewBox").getString()),x=0,b=0;if("number"==typeof i){var w=t.getStyle("width");w.hasValue()?x=w.getPixels("x")/i:isNaN(y[2])||(x=y[2]/i)}if("number"==typeof n){var S=t.getStyle("height");S.hasValue()?b=S.getPixels("y")/n:isNaN(y[3])||(b=y[3]/n)}x||(x=b),b||(b=x),t.getAttribute("width",!0).setValue(i),t.getAttribute("height",!0).setValue(n);var T=t.getStyle("transform",!0,!0);T.setValue("".concat(T.getString()," scale(").concat(1/x,", ").concat(1/b,")"))}r||c.clearRect(0,0,d,v),t.render(c),l&&(this.isFirstRender=!1)}}Q.defaultWindow=W,Q.defaultFetch=G;var{defaultFetch:$}=Q,Z="undefined"!=typeof DOMParser?DOMParser:null;class K{constructor(){var{fetch:t=$,DOMParser:e=Z}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.fetch=t,this.DOMParser=e}parse(t){var e=this;return a()((function*(){return t.startsWith("<")?e.parseFromString(t):e.load(t)}))()}parseFromString(t){var e=new this.DOMParser;try{return this.checkDocument(e.parseFromString(t,"image/svg+xml"))}catch(r){return this.checkDocument(e.parseFromString(t,"text/xml"))}}checkDocument(t){var e=t.getElementsByTagName("parsererror")[0];if(e)throw new Error(e.textContent);return t}load(t){var e=this;return a()((function*(){var r=yield e.fetch(t),i=yield r.text();return e.parseFromString(i)}))()}}class J{constructor(t,e){this.type="translate",this.point=null,this.point=Y.parse(e)}apply(t){var{x:e,y:r}=this.point;t.translate(e||0,r||0)}unapply(t){var{x:e,y:r}=this.point;t.translate(-1*e||0,-1*r||0)}applyToPoint(t){var{x:e,y:r}=this.point;t.applyTransform([1,0,0,1,e||0,r||0])}}class tt{constructor(t,e,r){this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var i=m(e);this.angle=new H(t,"angle",i[0]),this.originX=r[0],this.originY=r[1],this.cx=i[1]||0,this.cy=i[2]||0}apply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(a.getRadians()),t.translate(-s,-o)}unapply(t){var{cx:e,cy:r,originX:i,originY:n,angle:a}=this,s=e+i.getPixels("x"),o=r+n.getPixels("y");t.translate(s,o),t.rotate(-1*a.getRadians()),t.translate(-s,-o)}applyToPoint(t){var{cx:e,cy:r,angle:i}=this,n=i.getRadians();t.applyTransform([1,0,0,1,e||0,r||0]),t.applyTransform([Math.cos(n),Math.sin(n),-Math.sin(n),Math.cos(n),0,0]),t.applyTransform([1,0,0,1,-e||0,-r||0])}}class et{constructor(t,e,r){this.type="scale",this.scale=null,this.originX=null,this.originY=null;var i=Y.parseScale(e);0!==i.x&&0!==i.y||(i.x=V,i.y=V),this.scale=i,this.originX=r[0],this.originY=r[1]}apply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(e,r||e),t.translate(-a,-s)}unapply(t){var{scale:{x:e,y:r},originX:i,originY:n}=this,a=i.getPixels("x"),s=n.getPixels("y");t.translate(a,s),t.scale(1/e,1/r||e),t.translate(-a,-s)}applyToPoint(t){var{x:e,y:r}=this.scale;t.applyTransform([e||0,0,0,r||0,0,0])}}class rt{constructor(t,e,r){this.type="matrix",this.matrix=[],this.originX=null,this.originY=null,this.matrix=m(e),this.originX=r[0],this.originY=r[1]}apply(t){var{originX:e,originY:r,matrix:i}=this,n=e.getPixels("x"),a=r.getPixels("y");t.translate(n,a),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),t.translate(-n,-a)}unapply(t){var{originX:e,originY:r,matrix:i}=this,n=i[0],a=i[2],s=i[4],o=i[1],u=i[3],h=i[5],c=1/(n*(1*u-0*h)-a*(1*o-0*h)+s*(0*o-0*u)),l=e.getPixels("x"),f=r.getPixels("y");t.translate(l,f),t.transform(c*(1*u-0*h),c*(0*h-1*o),c*(0*s-1*a),c*(1*n-0*s),c*(a*h-s*u),c*(s*o-n*h)),t.translate(-l,-f)}applyToPoint(t){t.applyTransform(this.matrix)}}class it extends rt{constructor(t,e,r){super(t,e,r),this.type="skew",this.angle=null,this.angle=new H(t,"angle",e)}}class nt extends it{constructor(t,e,r){super(t,e,r),this.type="skewX",this.matrix=[1,0,Math.tan(this.angle.getRadians()),1,0,0]}}class at extends it{constructor(t,e,r){super(t,e,r),this.type="skewY",this.matrix=[1,Math.tan(this.angle.getRadians()),0,1,0,0]}}class st{constructor(t,e,r){this.document=t,this.transforms=[],function(t){return d(t).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(e).forEach(t=>{if("none"!==t){var[e,i]=function(t){var[e,r]=t.split("(");return[e.trim(),r.trim().replace(")","")]}(t),n=st.transformTypes[e];void 0!==n&&this.transforms.push(new n(this.document,i,r))}})}static fromElement(t,e){var r=e.getStyle("transform",!1,!0),[i,n=i]=e.getStyle("transform-origin",!1,!0).split(),a=[i,n];return r.hasValue()?new st(t,r.getString(),a):null}apply(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].apply(t)}unapply(t){for(var{transforms:e}=this,r=e.length-1;r>=0;r--)e[r].unapply(t)}applyToPoint(t){for(var{transforms:e}=this,r=e.length,i=0;i<r;i++)e[i].applyToPoint(t)}}st.transformTypes={translate:J,rotate:tt,scale:et,matrix:rt,skewX:nt,skewY:at};class ot{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.document=t,this.node=e,this.captureTextNodes=r,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],e&&1===e.nodeType){if(Array.from(e.attributes).forEach(e=>{var r=b(e.nodeName);this.attributes[r]=new H(t,r,e.value)}),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue())this.getAttribute("style").getString().split(";").map(t=>t.trim()).forEach(e=>{if(e){var[r,i]=e.split(":").map(t=>t.trim());this.styles[r]=new H(t,r,i)}});var{definitions:i}=t,n=this.getAttribute("id");n.hasValue()&&(i[n.getString()]||(i[n.getString()]=this)),Array.from(e.childNodes).forEach(e=>{if(1===e.nodeType)this.addChild(e);else if(r&&(3===e.nodeType||4===e.nodeType)){var i=t.createTextNode(e);i.getText().length>0&&this.addChild(i)}})}}getAttribute(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=this.attributes[t];if(!r&&e){var i=new H(this.document,t,"");return this.attributes[t]=i,i}return r||H.empty(this.document)}getHrefAttribute(){for(var t in this.attributes)if("href"===t||t.endsWith(":href"))return this.attributes[t];return H.empty(this.document)}getStyle(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.styles[t];if(i)return i;var n=this.getAttribute(t);if(null!=n&&n.hasValue())return this.styles[t]=n,n;if(!r){var{parent:a}=this;if(a){var s=a.getStyle(t);if(null!=s&&s.hasValue())return s}}if(e){var o=new H(this.document,t,"");return this.styles[t]=o,o}return i||H.empty(this.document)}render(t){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(t.save(),this.getStyle("mask").hasValue()){var e=this.getStyle("mask").getDefinition();e&&(this.applyEffects(t),e.apply(t,this))}else if("none"!==this.getStyle("filter").getValue("none")){var r=this.getStyle("filter").getDefinition();r&&(this.applyEffects(t),r.apply(t,this))}else this.setContext(t),this.renderChildren(t),this.clearContext(t);t.restore()}}setContext(t){}applyEffects(t){var e=st.fromElement(this.document,this);e&&e.apply(t);var r=this.getStyle("clip-path",!1,!0);if(r.hasValue()){var i=r.getDefinition();i&&i.apply(t)}}clearContext(t){}renderChildren(t){this.children.forEach(e=>{e.render(t)})}addChild(t){var e=t instanceof ot?t:this.document.createElement(t);e.parent=this,ot.ignoreChildTypes.includes(e.type)||this.children.push(e)}matchesSelector(t){var{node:e}=this;if("function"==typeof e.matches)return e.matches(t);var r=e.getAttribute("class");return!(!r||""===r)&&r.split(" ").some(e=>".".concat(e)===t)}addStylesFromStyleDefinition(){var{styles:t,stylesSpecificity:e}=this.document;for(var r in t)if(!r.startsWith("@")&&this.matchesSelector(r)){var i=t[r],n=e[r];if(i)for(var a in i){var s=this.stylesSpecificity[a];void 0===s&&(s="000"),n>=s&&(this.styles[a]=i[a],this.stylesSpecificity[a]=n)}}}removeStyles(t,e){return e.reduce((e,r)=>{var i=t.getStyle(r);if(!i.hasValue())return e;var n=i.getString();return i.setValue(""),[...e,[r,n]]},[])}restoreStyles(t,e){e.forEach(e=>{var[r,i]=e;t.getStyle(r,!0).setValue(i)})}}ot.ignoreChildTypes=["title"];class ut extends ot{constructor(t,e,r){super(t,e,r)}}function ht(t){var e=t.trim();return/^('|")/.test(e)?e:'"'.concat(e,'"')}function ct(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return e;default:return/^oblique\s+(-|)\d+deg$/.test(e)?e:""}}function lt(t){if(!t)return"";var e=t.trim().toLowerCase();switch(e){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return e;default:return/^[\d.]+$/.test(e)?e:""}}class ft{constructor(t,e,r,i,n,a){var s=a?"string"==typeof a?ft.parse(a):a:{};this.fontFamily=n||s.fontFamily,this.fontSize=i||s.fontSize,this.fontStyle=t||s.fontStyle,this.fontWeight=r||s.fontWeight,this.fontVariant=e||s.fontVariant}static parse(){var t=arguments.length>1?arguments[1]:void 0,e="",r="",i="",n="",a="",s=d(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().split(" "),o={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return s.forEach(t=>{switch(!0){case!o.fontStyle&&ft.styles.includes(t):"inherit"!==t&&(e=t),o.fontStyle=!0;break;case!o.fontVariant&&ft.variants.includes(t):"inherit"!==t&&(r=t),o.fontStyle=!0,o.fontVariant=!0;break;case!o.fontWeight&&ft.weights.includes(t):"inherit"!==t&&(i=t),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0;break;case!o.fontSize:"inherit"!==t&&([n]=t.split("/")),o.fontStyle=!0,o.fontVariant=!0,o.fontWeight=!0,o.fontSize=!0;break;default:"inherit"!==t&&(a+=t)}}),new ft(e,r,i,n,a,t)}toString(){return[ct(this.fontStyle),this.fontVariant,lt(this.fontWeight),this.fontSize,(t=this.fontFamily,void 0===i?t:t.trim().split(",").map(ht).join(","))].join(" ").trim();var t}}ft.styles="normal|italic|oblique|inherit",ft.variants="normal|small-caps|inherit",ft.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";class gt{constructor(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.addPoint(t,e),this.addPoint(r,i)}get x(){return this.x1}get y(){return this.y1}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}addPoint(t,e){void 0!==t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),void 0!==e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))}addX(t){this.addPoint(t,null)}addY(t){this.addPoint(null,t)}addBoundingBox(t){if(t){var{x1:e,y1:r,x2:i,y2:n}=t;this.addPoint(e,r),this.addPoint(i,n)}}sumCubic(t,e,r,i,n){return Math.pow(1-t,3)*e+3*Math.pow(1-t,2)*t*r+3*(1-t)*Math.pow(t,2)*i+Math.pow(t,3)*n}bezierCurveAdd(t,e,r,i,n){var a=6*e-12*r+6*i,s=-3*e+9*r-9*i+3*n,o=3*r-3*e;if(0!==s){var u=Math.pow(a,2)-4*o*s;if(!(u<0)){var h=(-a+Math.sqrt(u))/(2*s);0<h&&h<1&&(t?this.addX(this.sumCubic(h,e,r,i,n)):this.addY(this.sumCubic(h,e,r,i,n)));var c=(-a-Math.sqrt(u))/(2*s);0<c&&c<1&&(t?this.addX(this.sumCubic(c,e,r,i,n)):this.addY(this.sumCubic(c,e,r,i,n)))}}else{if(0===a)return;var l=-o/a;0<l&&l<1&&(t?this.addX(this.sumCubic(l,e,r,i,n)):this.addY(this.sumCubic(l,e,r,i,n)))}}addBezierCurve(t,e,r,i,n,a,s,o){this.addPoint(t,e),this.addPoint(s,o),this.bezierCurveAdd(!0,t,r,n,s),this.bezierCurveAdd(!1,e,i,a,o)}addQuadraticCurve(t,e,r,i,n,a){var s=t+2/3*(r-t),o=e+2/3*(i-e),u=s+1/3*(n-t),h=o+1/3*(a-e);this.addBezierCurve(t,e,s,u,o,h,n,a)}isPointInBox(t,e){var{x1:r,y1:i,x2:n,y2:a}=this;return r<=t&&t<=n&&i<=e&&e<=a}}class pt extends f.a{constructor(t){super(t.replace(/([+\-.])\s+/gm,"$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,"")),this.control=null,this.start=null,this.current=null,this.command=null,this.commands=this.commands,this.i=-1,this.previousCommand=null,this.points=[],this.angles=[]}reset(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new Y(0,0),this.control=new Y(0,0),this.current=new Y(0,0),this.points=[],this.angles=[]}isEnd(){var{i:t,commands:e}=this;return t>=e.length-1}next(){var t=this.commands[++this.i];return this.previousCommand=this.command,this.command=t,t}getPoint(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",r=new Y(this.command[t],this.command[e]);return this.makeAbsolute(r)}getAsControlPoint(t,e){var r=this.getPoint(t,e);return this.control=r,r}getAsCurrentPoint(t,e){var r=this.getPoint(t,e);return this.current=r,r}getReflectedControlPoint(){var t=this.previousCommand.type;if(t!==f.a.CURVE_TO&&t!==f.a.SMOOTH_CURVE_TO&&t!==f.a.QUAD_TO&&t!==f.a.SMOOTH_QUAD_TO)return this.current;var{current:{x:e,y:r},control:{x:i,y:n}}=this;return new Y(2*e-i,2*r-n)}makeAbsolute(t){if(this.command.relative){var{x:e,y:r}=this.current;t.x+=e,t.y+=r}return t}addMarker(t,e,r){var{points:i,angles:n}=this;r&&n.length>0&&!n[n.length-1]&&(n[n.length-1]=i[i.length-1].angleTo(r)),this.addMarkerAngle(t,e?e.angleTo(t):null)}addMarkerAngle(t,e){this.points.push(t),this.angles.push(e)}getMarkerPoints(){return this.points}getMarkerAngles(){for(var{angles:t}=this,e=t.length,r=0;r<e;r++)if(!t[r])for(var i=r+1;i<e;i++)if(t[i]){t[r]=t[i];break}return t}}class dt extends ot{constructor(){super(...arguments),this.modifiedEmSizeStack=!1}calculateOpacity(){for(var t=1,e=this;e;){var r=e.getStyle("opacity",!1,!0);r.hasValue(!0)&&(t*=r.getNumber()),e=e.parent}return t}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!e){var r=this.getStyle("fill"),i=this.getStyle("fill-opacity"),n=this.getStyle("stroke"),a=this.getStyle("stroke-opacity");if(r.isUrlDefinition()){var s=r.getFillStyleDefinition(this,i);s&&(t.fillStyle=s)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var o=r.getColor();"inherit"!==o&&(t.fillStyle="none"===o?"rgba(0,0,0,0)":o)}if(i.hasValue()){var u=new H(this.document,"fill",t.fillStyle).addOpacity(i).getColor();t.fillStyle=u}if(n.isUrlDefinition()){var h=n.getFillStyleDefinition(this,a);h&&(t.strokeStyle=h)}else if(n.hasValue()){"currentColor"===n.getString()&&n.setValue(this.getStyle("color").getColor());var c=n.getString();"inherit"!==c&&(t.strokeStyle="none"===c?"rgba(0,0,0,0)":c)}if(a.hasValue()){var l=new H(this.document,"stroke",t.strokeStyle).addOpacity(a).getString();t.strokeStyle=l}var f=this.getStyle("stroke-width");if(f.hasValue()){var g=f.getPixels();t.lineWidth=g||V}var p=this.getStyle("stroke-linecap"),d=this.getStyle("stroke-linejoin"),v=this.getStyle("stroke-miterlimit"),y=this.getStyle("stroke-dasharray"),x=this.getStyle("stroke-dashoffset");if(p.hasValue()&&(t.lineCap=p.getString()),d.hasValue()&&(t.lineJoin=d.getString()),v.hasValue()&&(t.miterLimit=v.getNumber()),y.hasValue()&&"none"!==y.getString()){var b=m(y.getString());void 0!==t.setLineDash?t.setLineDash(b):void 0!==t.webkitLineDash?t.webkitLineDash=b:void 0===t.mozDash||1===b.length&&0===b[0]||(t.mozDash=b);var w=x.getPixels();void 0!==t.lineDashOffset?t.lineDashOffset=w:void 0!==t.webkitLineDashOffset?t.webkitLineDashOffset=w:void 0!==t.mozDashOffset&&(t.mozDashOffset=w)}}if(this.modifiedEmSizeStack=!1,void 0!==t.font){var S=this.getStyle("font"),T=this.getStyle("font-style"),A=this.getStyle("font-variant"),O=this.getStyle("font-weight"),P=this.getStyle("font-size"),E=this.getStyle("font-family"),C=new ft(T.getString(),A.getString(),O.getString(),P.hasValue()?"".concat(P.getPixels(!0),"px"):"",E.getString(),ft.parse(S.getString(),t.font));T.setValue(C.fontStyle),A.setValue(C.fontVariant),O.setValue(C.fontWeight),P.setValue(C.fontSize),E.setValue(C.fontFamily),t.font=C.toString(),P.isPixels()&&(this.document.emSize=P.getPixels(),this.modifiedEmSizeStack=!0)}e||(this.applyEffects(t),t.globalAlpha=this.calculateOpacity())}clearContext(t){super.clearContext(t),this.modifiedEmSizeStack&&this.document.popEmSize()}}class vt extends dt{constructor(t,e,r){super(t,e,r),this.type="path",this.pathParser=null,this.pathParser=new pt(this.getAttribute("d").getString())}path(t){var{pathParser:e}=this,r=new gt;for(e.reset(),t&&t.beginPath();!e.isEnd();)switch(e.next().type){case pt.MOVE_TO:this.pathM(t,r);break;case pt.LINE_TO:this.pathL(t,r);break;case pt.HORIZ_LINE_TO:this.pathH(t,r);break;case pt.VERT_LINE_TO:this.pathV(t,r);break;case pt.CURVE_TO:this.pathC(t,r);break;case pt.SMOOTH_CURVE_TO:this.pathS(t,r);break;case pt.QUAD_TO:this.pathQ(t,r);break;case pt.SMOOTH_QUAD_TO:this.pathT(t,r);break;case pt.ARC:this.pathA(t,r);break;case pt.CLOSE_PATH:this.pathZ(t,r)}return r}getBoundingBox(t){return this.path()}getMarkers(){var{pathParser:t}=this,e=t.getMarkerPoints(),r=t.getMarkerAngles();return e.map((t,e)=>[t,r[e]])}renderChildren(t){this.path(t),this.document.screen.mouse.checkPath(this,t);var e=this.getStyle("fill-rule");""!==t.fillStyle&&("inherit"!==e.getString("inherit")?t.fill(e.getString()):t.fill()),""!==t.strokeStyle&&("non-scaling-stroke"===this.getAttribute("vector-effect").getString()?(t.save(),t.setTransform(1,0,0,1,0,0),t.stroke(),t.restore()):t.stroke());var r=this.getMarkers();if(r){var i=r.length-1,n=this.getStyle("marker-start"),a=this.getStyle("marker-mid"),s=this.getStyle("marker-end");if(n.isUrlDefinition()){var o=n.getDefinition(),[u,h]=r[0];o.render(t,u,h)}if(a.isUrlDefinition())for(var c=a.getDefinition(),l=1;l<i;l++){var[f,g]=r[l];c.render(t,f,g)}if(s.isUrlDefinition()){var p=s.getDefinition(),[d,v]=r[i];p.render(t,d,v)}}}static pathM(t){var e=t.getAsCurrentPoint();return t.start=t.current,{point:e}}pathM(t,e){var{pathParser:r}=this,{point:i}=vt.pathM(r),{x:n,y:a}=i;r.addMarker(i),e.addPoint(n,a),t&&t.moveTo(n,a)}static pathL(t){var{current:e}=t;return{current:e,point:t.getAsCurrentPoint()}}pathL(t,e){var{pathParser:r}=this,{current:i,point:n}=vt.pathL(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathH(t){var{current:e,command:r}=t,i=new Y((r.relative?e.x:0)+r.x,e.y);return t.current=i,{current:e,point:i}}pathH(t,e){var{pathParser:r}=this,{current:i,point:n}=vt.pathH(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathV(t){var{current:e,command:r}=t,i=new Y(e.x,(r.relative?e.y:0)+r.y);return t.current=i,{current:e,point:i}}pathV(t,e){var{pathParser:r}=this,{current:i,point:n}=vt.pathV(r),{x:a,y:s}=n;r.addMarker(n,i),e.addPoint(a,s),t&&t.lineTo(a,s)}static pathC(t){var{current:e}=t;return{current:e,point:t.getPoint("x1","y1"),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathC(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=vt.pathC(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathS(t){var{current:e}=t;return{current:e,point:t.getReflectedControlPoint(),controlPoint:t.getAsControlPoint("x2","y2"),currentPoint:t.getAsCurrentPoint()}}pathS(t,e){var{pathParser:r}=this,{current:i,point:n,controlPoint:a,currentPoint:s}=vt.pathS(r);r.addMarker(s,a,n),e.addBezierCurve(i.x,i.y,n.x,n.y,a.x,a.y,s.x,s.y),t&&t.bezierCurveTo(n.x,n.y,a.x,a.y,s.x,s.y)}static pathQ(t){var{current:e}=t;return{current:e,controlPoint:t.getAsControlPoint("x1","y1"),currentPoint:t.getAsCurrentPoint()}}pathQ(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=vt.pathQ(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathT(t){var{current:e}=t,r=t.getReflectedControlPoint();return t.control=r,{current:e,controlPoint:r,currentPoint:t.getAsCurrentPoint()}}pathT(t,e){var{pathParser:r}=this,{current:i,controlPoint:n,currentPoint:a}=vt.pathT(r);r.addMarker(a,n,n),e.addQuadraticCurve(i.x,i.y,n.x,n.y,a.x,a.y),t&&t.quadraticCurveTo(n.x,n.y,a.x,a.y)}static pathA(t){var{current:e,command:r}=t,{rX:i,rY:n,xRot:a,lArcFlag:s,sweepFlag:o}=r,u=a*(Math.PI/180),h=t.getAsCurrentPoint(),c=new Y(Math.cos(u)*(e.x-h.x)/2+Math.sin(u)*(e.y-h.y)/2,-Math.sin(u)*(e.x-h.x)/2+Math.cos(u)*(e.y-h.y)/2),l=Math.pow(c.x,2)/Math.pow(i,2)+Math.pow(c.y,2)/Math.pow(n,2);l>1&&(i*=Math.sqrt(l),n*=Math.sqrt(l));var f=(s===o?-1:1)*Math.sqrt((Math.pow(i,2)*Math.pow(n,2)-Math.pow(i,2)*Math.pow(c.y,2)-Math.pow(n,2)*Math.pow(c.x,2))/(Math.pow(i,2)*Math.pow(c.y,2)+Math.pow(n,2)*Math.pow(c.x,2)));isNaN(f)&&(f=0);var g=new Y(f*i*c.y/n,f*-n*c.x/i),p=new Y((e.x+h.x)/2+Math.cos(u)*g.x-Math.sin(u)*g.y,(e.y+h.y)/2+Math.sin(u)*g.x+Math.cos(u)*g.y),d=I([1,0],[(c.x-g.x)/i,(c.y-g.y)/n]),v=[(c.x-g.x)/i,(c.y-g.y)/n],y=[(-c.x-g.x)/i,(-c.y-g.y)/n],m=I(v,y);return k(v,y)<=-1&&(m=Math.PI),k(v,y)>=1&&(m=0),{currentPoint:h,rX:i,rY:n,sweepFlag:o,xAxisRotation:u,centp:p,a1:d,ad:m}}pathA(t,e){var{pathParser:r}=this,{currentPoint:i,rX:n,rY:a,sweepFlag:s,xAxisRotation:o,centp:u,a1:h,ad:c}=vt.pathA(r),l=1-s?1:-1,f=h+l*(c/2),g=new Y(u.x+n*Math.cos(f),u.y+a*Math.sin(f));if(r.addMarkerAngle(g,f-l*Math.PI/2),r.addMarkerAngle(i,f-l*Math.PI),e.addPoint(i.x,i.y),t&&!isNaN(h)&&!isNaN(c)){var p=n>a?n:a,d=n>a?1:n/a,v=n>a?a/n:1;t.translate(u.x,u.y),t.rotate(o),t.scale(d,v),t.arc(0,0,p,h,h+c,Boolean(1-s)),t.scale(1/d,1/v),t.rotate(-o),t.translate(-u.x,-u.y)}}static pathZ(t){t.current=t.start}pathZ(t,e){vt.pathZ(this.pathParser),t&&e.x1!==e.x2&&e.y1!==e.y2&&t.closePath()}}class yt extends vt{constructor(t,e,r){super(t,e,r),this.type="glyph",this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber(),this.unicode=this.getAttribute("unicode").getString(),this.arabicForm=this.getAttribute("arabic-form").getString()}}class mt extends dt{constructor(t,e,r){super(t,e,new.target===mt||r),this.type="text",this.x=0,this.y=0,this.measureCache=-1}setContext(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.setContext(t,e);var r=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();r&&(t.textBaseline=r)}initializeCoordinates(t){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var e=this.getAttribute("dx"),r=this.getAttribute("dy");e.hasValue()&&(this.x+=e.getPixels("x")),r.hasValue()&&(this.y+=r.getPixels("y")),this.x+=this.getAnchorDelta(t,this,0)}getBoundingBox(t){if("text"!==this.type)return this.getTElementBoundingBox(t);this.initializeCoordinates(t);var e=null;return this.children.forEach((r,i)=>{var n=this.getChildBoundingBox(t,this,this,i);e?e.addBoundingBox(n):e=n}),e}getFontSize(){var{document:t,parent:e}=this,r=ft.parse(t.ctx.font).fontSize;return e.getStyle("font-size").getNumber(r)}getTElementBoundingBox(t){var e=this.getFontSize();return new gt(this.x,this.y-e,this.x+this.measureText(t),this.y)}getGlyph(t,e,r){var i=e[r],n=null;if(t.isArabic){var a=e.length,s=e[r-1],o=e[r+1],u="isolated";if((0===r||" "===s)&&r<a-2&&" "!==o&&(u="terminal"),r>0&&" "!==s&&r<a-2&&" "!==o&&(u="medial"),r>0&&" "!==s&&(r===a-1||" "===o)&&(u="initial"),void 0!==t.glyphs[i]){var h=t.glyphs[i];n=h instanceof yt?h:h[u]}}else n=t.glyphs[i];return n||(n=t.missingGlyph),n}getText(){return""}getTextFromNode(t){var e=t||this.node,r=Array.from(e.parentNode.childNodes),i=r.indexOf(e),n=r.length-1,a=d(e.textContent||"");return 0===i&&(a=v(a)),i===n&&(a=y(a)),a}renderChildren(t){if("text"===this.type){this.initializeCoordinates(t),this.children.forEach((e,r)=>{this.renderChild(t,this,this,r)});var{mouse:e}=this.document.screen;e.isWorking()&&e.checkBoundingBox(this,this.getBoundingBox(t))}else this.renderTElementChildren(t)}renderTElementChildren(t){var{document:e,parent:r}=this,i=this.getText(),n=r.getStyle("font-family").getDefinition();if(n)for(var{unitsPerEm:a}=n.fontFace,s=ft.parse(e.ctx.font),o=r.getStyle("font-size").getNumber(s.fontSize),u=r.getStyle("font-style").getString(s.fontStyle),h=o/a,c=n.isRTL?i.split("").reverse().join(""):i,l=m(r.getAttribute("dx").getString()),f=c.length,g=0;g<f;g++){var p=this.getGlyph(n,c,g);t.translate(this.x,this.y),t.scale(h,-h);var d=t.lineWidth;t.lineWidth=t.lineWidth*a/o,"italic"===u&&t.transform(1,0,.4,1,0,0),p.render(t),"italic"===u&&t.transform(1,0,-.4,1,0,0),t.lineWidth=d,t.scale(1/h,-1/h),t.translate(-this.x,-this.y),this.x+=o*(p.horizAdvX||n.horizAdvX)/a,void 0===l[g]||isNaN(l[g])||(this.x+=l[g])}else{var{x:v,y:y}=this;t.fillStyle&&t.fillText(i,v,y),t.strokeStyle&&t.strokeText(i,v,y)}}getAnchorDelta(t,e,r){var i=this.getStyle("text-anchor").getString("start");if("start"!==i){for(var{children:n}=e,a=n.length,s=null,o=0,u=r;u<a&&(s=n[u],!(u>r&&s.getAttribute("x").hasValue()||s.getAttribute("text-anchor").hasValue()));u++)o+=s.measureTextRecursive(t);return-1*("end"===i?o:o/2)}return 0}adjustChildCoordinates(t,e,r,i){var n=r.children[i];if("function"!=typeof n.measureText)return n;t.save(),n.setContext(t,!0);var a=n.getAttribute("x"),s=n.getAttribute("y"),o=n.getAttribute("dx"),u=n.getAttribute("dy"),h=n.getAttribute("text-anchor").getString("start");if(0===i&&"textNode"!==n.type&&(a.hasValue()||a.setValue(e.getAttribute("x").getValue("0")),s.hasValue()||s.setValue(e.getAttribute("y").getValue("0")),o.hasValue()||o.setValue(e.getAttribute("dx").getValue("0")),u.hasValue()||u.setValue(e.getAttribute("dy").getValue("0"))),a.hasValue()){if(n.x=a.getPixels("x")+e.getAnchorDelta(t,r,i),"start"!==h){var c=n.measureTextRecursive(t);n.x+=-1*("end"===h?c:c/2)}o.hasValue()&&(n.x+=o.getPixels("x"))}else{if("start"!==h){var l=n.measureTextRecursive(t);e.x+=-1*("end"===h?l:l/2)}o.hasValue()&&(e.x+=o.getPixels("x")),n.x=e.x}return e.x=n.x+n.measureText(t),s.hasValue()?(n.y=s.getPixels("y"),u.hasValue()&&(n.y+=u.getPixels("y"))):(u.hasValue()&&(e.y+=u.getPixels("y")),n.y=e.y),e.y=n.y,n.clearContext(t),t.restore(),n}getChildBoundingBox(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);if("function"!=typeof n.getBoundingBox)return null;var a=n.getBoundingBox(t);return a?(n.children.forEach((r,i)=>{var s=e.getChildBoundingBox(t,e,n,i);a.addBoundingBox(s)}),a):null}renderChild(t,e,r,i){var n=this.adjustChildCoordinates(t,e,r,i);n.render(t),n.children.forEach((r,i)=>{e.renderChild(t,e,n,i)})}measureTextRecursive(t){return this.children.reduce((e,r)=>e+r.measureTextRecursive(t),this.measureText(t))}measureText(t){var{measureCache:e}=this;if(~e)return e;var r=this.getText(),i=this.measureTargetText(t,r);return this.measureCache=i,i}measureTargetText(t,e){if(!e.length)return 0;var{parent:r}=this,i=r.getStyle("font-family").getDefinition();if(i){for(var n=this.getFontSize(),a=i.isRTL?e.split("").reverse().join(""):e,s=m(r.getAttribute("dx").getString()),o=a.length,u=0,h=0;h<o;h++){u+=(this.getGlyph(i,a,h).horizAdvX||i.horizAdvX)*n/i.fontFace.unitsPerEm,void 0===s[h]||isNaN(s[h])||(u+=s[h])}return u}if(!t.measureText)return 10*e.length;t.save(),this.setContext(t,!0);var{width:c}=t.measureText(e);return this.clearContext(t),t.restore(),c}}class xt extends mt{constructor(t,e,r){super(t,e,new.target===xt||r),this.type="tspan",this.text=this.children.length>0?"":this.getTextFromNode()}getText(){return this.text}}class bt extends xt{constructor(){super(...arguments),this.type="textNode"}}class wt extends dt{constructor(){super(...arguments),this.type="svg",this.root=!1}setContext(t){var e,{document:r}=this,{screen:i,window:n}=r,a=t.canvas;if(i.setDefaults(t),a.style&&void 0!==t.font&&n&&void 0!==n.getComputedStyle){t.font=n.getComputedStyle(a).getPropertyValue("font");var s=new H(r,"fontSize",ft.parse(t.font).fontSize);s.hasValue()&&(r.rootEmSize=s.getPixels("y"),r.emSize=r.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var{width:o,height:u}=i.viewPort;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var h=this.getAttribute("refX"),c=this.getAttribute("refY"),l=this.getAttribute("viewBox"),f=l.hasValue()?m(l.getString()):null,g=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),p=0,d=0,v=0,y=0;f&&(p=f[0],d=f[1]),this.root||(o=this.getStyle("width").getPixels("x"),u=this.getStyle("height").getPixels("y"),"marker"===this.type&&(v=p,y=d,p=0,d=0)),i.viewPort.setCurrent(o,u),!this.node||this.parent&&"foreignObject"!==(null===(e=this.node.parentNode)||void 0===e?void 0:e.nodeName)||!this.getStyle("transform",!1,!0).hasValue()||this.getStyle("transform-origin",!1,!0).hasValue()||this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),super.setContext(t),t.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),f&&(o=f[2],u=f[3]),r.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:i.viewPort.width,desiredWidth:o,height:i.viewPort.height,desiredHeight:u,minX:p,minY:d,refX:h.getValue(),refY:c.getValue(),clip:g,clipX:v,clipY:y}),f&&(i.viewPort.removeCurrent(),i.viewPort.setCurrent(o,u))}clearContext(t){super.clearContext(t),this.document.screen.viewPort.removeCurrent()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=this.getAttribute("width",!0),n=this.getAttribute("height",!0),a=this.getAttribute("viewBox"),s=this.getAttribute("style"),o=i.getNumber(0),u=n.getNumber(0);if(r)if("string"==typeof r)this.getAttribute("preserveAspectRatio",!0).setValue(r);else{var h=this.getAttribute("preserveAspectRatio");h.hasValue()&&h.setValue(h.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(i.setValue(t),n.setValue(e),a.hasValue()||a.setValue("0 0 ".concat(o||t," ").concat(u||e)),s.hasValue()){var c=this.getStyle("width"),l=this.getStyle("height");c.hasValue()&&c.setValue("".concat(t,"px")),l.hasValue()&&l.setValue("".concat(e,"px"))}}}class St extends vt{constructor(){super(...arguments),this.type="rect"}path(t){var e=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),i=this.getStyle("width",!1,!0).getPixels("x"),n=this.getStyle("height",!1,!0).getPixels("y"),a=this.getAttribute("rx"),s=this.getAttribute("ry"),o=a.getPixels("x"),u=s.getPixels("y");if(a.hasValue()&&!s.hasValue()&&(u=o),s.hasValue()&&!a.hasValue()&&(o=u),o=Math.min(o,i/2),u=Math.min(u,n/2),t){var h=(Math.sqrt(2)-1)/3*4;t.beginPath(),n>0&&i>0&&(t.moveTo(e+o,r),t.lineTo(e+i-o,r),t.bezierCurveTo(e+i-o+h*o,r,e+i,r+u-h*u,e+i,r+u),t.lineTo(e+i,r+n-u),t.bezierCurveTo(e+i,r+n-u+h*u,e+i-o+h*o,r+n,e+i-o,r+n),t.lineTo(e+o,r+n),t.bezierCurveTo(e+o-h*o,r+n,e,r+n-u+h*u,e,r+n-u),t.lineTo(e,r+u),t.bezierCurveTo(e,r+u-h*u,e+o-h*o,r,e+o,r),t.closePath())}return new gt(e,r,e+i,r+n)}getMarkers(){return null}}class Tt extends vt{constructor(){super(...arguments),this.type="circle"}path(t){var e=this.getAttribute("cx").getPixels("x"),r=this.getAttribute("cy").getPixels("y"),i=this.getAttribute("r").getPixels();return t&&i>0&&(t.beginPath(),t.arc(e,r,i,0,2*Math.PI,!1),t.closePath()),new gt(e-i,r-i,e+i,r+i)}getMarkers(){return null}}class At extends vt{constructor(){super(...arguments),this.type="ellipse"}path(t){var e=(Math.sqrt(2)-1)/3*4,r=this.getAttribute("rx").getPixels("x"),i=this.getAttribute("ry").getPixels("y"),n=this.getAttribute("cx").getPixels("x"),a=this.getAttribute("cy").getPixels("y");return t&&r>0&&i>0&&(t.beginPath(),t.moveTo(n+r,a),t.bezierCurveTo(n+r,a+e*i,n+e*r,a+i,n,a+i),t.bezierCurveTo(n-e*r,a+i,n-r,a+e*i,n-r,a),t.bezierCurveTo(n-r,a-e*i,n-e*r,a-i,n,a-i),t.bezierCurveTo(n+e*r,a-i,n+r,a-e*i,n+r,a),t.closePath()),new gt(n-r,a-i,n+r,a+i)}getMarkers(){return null}}class Ot extends vt{constructor(){super(...arguments),this.type="line"}getPoints(){return[new Y(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new Y(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}path(t){var[{x:e,y:r},{x:i,y:n}]=this.getPoints();return t&&(t.beginPath(),t.moveTo(e,r),t.lineTo(i,n)),new gt(e,r,i,n)}getMarkers(){var[t,e]=this.getPoints(),r=t.angleTo(e);return[[t,r],[e,r]]}}class Pt extends vt{constructor(t,e,r){super(t,e,r),this.type="polyline",this.points=[],this.points=Y.parsePath(this.getAttribute("points").getString())}path(t){var{points:e}=this,[{x:r,y:i}]=e,n=new gt(r,i);return t&&(t.beginPath(),t.moveTo(r,i)),e.forEach(e=>{var{x:r,y:i}=e;n.addPoint(r,i),t&&t.lineTo(r,i)}),n}getMarkers(){var{points:t}=this,e=t.length-1,r=[];return t.forEach((i,n)=>{n!==e&&r.push([i,i.angleTo(t[n+1])])}),r.length>0&&r.push([t[t.length-1],r[r.length-1][1]]),r}}class Et extends Pt{constructor(){super(...arguments),this.type="polygon"}path(t){var e=super.path(t),[{x:r,y:i}]=this.points;return t&&(t.lineTo(r,i),t.closePath()),e}}class Ct extends ot{constructor(){super(...arguments),this.type="pattern"}createPattern(t,e,r){var i=this.getStyle("width").getPixels("x",!0),n=this.getStyle("height").getPixels("y",!0),a=new wt(this.document,null);a.attributes.viewBox=new H(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.width=new H(this.document,"width","".concat(i,"px")),a.attributes.height=new H(this.document,"height","".concat(n,"px")),a.attributes.transform=new H(this.document,"transform",this.getAttribute("patternTransform").getValue()),a.children=this.children;var s=this.document.createCanvas(i,n),o=s.getContext("2d"),u=this.getAttribute("x"),h=this.getAttribute("y");u.hasValue()&&h.hasValue()&&o.translate(u.getPixels("x",!0),h.getPixels("y",!0)),r.hasValue()?this.styles["fill-opacity"]=r:Reflect.deleteProperty(this.styles,"fill-opacity");for(var c=-1;c<=1;c++)for(var l=-1;l<=1;l++)o.save(),a.attributes.x=new H(this.document,"x",c*s.width),a.attributes.y=new H(this.document,"y",l*s.height),a.render(o),o.restore();return t.createPattern(s,"repeat")}}class Mt extends ot{constructor(){super(...arguments),this.type="marker"}render(t,e,r){if(e){var{x:i,y:n}=e,a=this.getAttribute("orient").getString("auto"),s=this.getAttribute("markerUnits").getString("strokeWidth");t.translate(i,n),"auto"===a&&t.rotate(r),"strokeWidth"===s&&t.scale(t.lineWidth,t.lineWidth),t.save();var o=new wt(this.document,null);o.type=this.type,o.attributes.viewBox=new H(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.refX=new H(this.document,"refX",this.getAttribute("refX").getValue()),o.attributes.refY=new H(this.document,"refY",this.getAttribute("refY").getValue()),o.attributes.width=new H(this.document,"width",this.getAttribute("markerWidth").getValue()),o.attributes.height=new H(this.document,"height",this.getAttribute("markerHeight").getValue()),o.attributes.overflow=new H(this.document,"overflow",this.getAttribute("overflow").getValue()),o.attributes.fill=new H(this.document,"fill",this.getAttribute("fill").getColor("black")),o.attributes.stroke=new H(this.document,"stroke",this.getAttribute("stroke").getValue("none")),o.children=this.children,o.render(t),t.restore(),"strokeWidth"===s&&t.scale(1/t.lineWidth,1/t.lineWidth),"auto"===a&&t.rotate(-r),t.translate(-i,-n)}}}class Nt extends ot{constructor(){super(...arguments),this.type="defs"}render(){}}class _t extends dt{constructor(){super(...arguments),this.type="g"}getBoundingBox(t){var e=new gt;return this.children.forEach(r=>{e.addBoundingBox(r.getBoundingBox(t))}),e}}class Vt extends ot{constructor(t,e,r){super(t,e,r),this.attributesToInherit=["gradientUnits"],this.stops=[];var{stops:i,children:n}=this;n.forEach(t=>{"stop"===t.type&&i.push(t)})}getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}createGradient(t,e,r){var i=this;this.getHrefAttribute().hasValue()&&(i=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(i));var{stops:n}=i,a=this.getGradient(t,e);if(!a)return this.addParentOpacity(r,n[n.length-1].color);if(n.forEach(t=>{a.addColorStop(t.offset,this.addParentOpacity(r,t.color))}),this.getAttribute("gradientTransform").hasValue()){var{document:s}=this,{MAX_VIRTUAL_PIXELS:o,viewPort:u}=s.screen,[h]=u.viewPorts,c=new St(s,null);c.attributes.x=new H(s,"x",-o/3),c.attributes.y=new H(s,"y",-o/3),c.attributes.width=new H(s,"width",o),c.attributes.height=new H(s,"height",o);var l=new _t(s,null);l.attributes.transform=new H(s,"transform",this.getAttribute("gradientTransform").getValue()),l.children=[c];var f=new wt(s,null);f.attributes.x=new H(s,"x",0),f.attributes.y=new H(s,"y",0),f.attributes.width=new H(s,"width",h.width),f.attributes.height=new H(s,"height",h.height),f.children=[l];var g=s.createCanvas(h.width,h.height),p=g.getContext("2d");return p.fillStyle=a,f.render(p),p.createPattern(g,"no-repeat")}return a}inheritStopContainer(t){this.attributesToInherit.forEach(e=>{!this.getAttribute(e).hasValue()&&t.getAttribute(e).hasValue()&&this.getAttribute(e,!0).setValue(t.getAttribute(e).getValue())})}addParentOpacity(t,e){return t.hasValue()?new H(this.document,"color",e).addOpacity(t).getColor():e}}class Rt extends Vt{constructor(t,e,r){super(t,e,r),this.type="linearGradient",this.attributesToInherit.push("x1","y1","x2","y2")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=r?e.getBoundingBox(t):null;if(r&&!i)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var n=r?i.x+i.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),a=r?i.y+i.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),s=r?i.x+i.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),o=r?i.y+i.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return n===s&&a===o?null:t.createLinearGradient(n,a,s,o)}}class kt extends Vt{constructor(t,e,r){super(t,e,r),this.type="radialGradient",this.attributesToInherit.push("cx","cy","r","fx","fy","fr")}getGradient(t,e){var r="objectBoundingBox"===this.getGradientUnits(),i=e.getBoundingBox(t);if(r&&!i)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var n=r?i.x+i.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),a=r?i.y+i.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),s=n,o=a;this.getAttribute("fx").hasValue()&&(s=r?i.x+i.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(o=r?i.y+i.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var u=r?(i.width+i.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),h=this.getAttribute("fr").getPixels();return t.createRadialGradient(s,o,h,n,a,u)}}class It extends ot{constructor(t,e,r){super(t,e,r),this.type="stop";var i=Math.max(0,Math.min(1,this.getAttribute("offset").getNumber())),n=this.getStyle("stop-opacity"),a=this.getStyle("stop-color",!0);""===a.getString()&&a.setValue("#000"),n.hasValue()&&(a=a.addOpacity(n)),this.offset=i,this.color=a.getColor()}}class Lt extends ot{constructor(t,e,r){super(t,e,r),this.type="animate",this.duration=0,this.initialValue=null,this.initialUnits="",this.removed=!1,this.frozen=!1,t.screen.animations.push(this),this.begin=this.getAttribute("begin").getMilliseconds(),this.maxDuration=this.begin+this.getAttribute("dur").getMilliseconds(),this.from=this.getAttribute("from"),this.to=this.getAttribute("to"),this.values=new H(t,"values",null);var i=this.getAttribute("values");i.hasValue()&&this.values.setValue(i.getString().split(";"))}getProperty(){var t=this.getAttribute("attributeType").getString(),e=this.getAttribute("attributeName").getString();return"CSS"===t?this.parent.getStyle(e,!0):this.parent.getAttribute(e,!0)}calcValue(){var{initialUnits:t}=this,{progress:e,from:r,to:i}=this.getProgress(),n=r.getNumber()+(i.getNumber()-r.getNumber())*e;return"%"===t&&(n*=100),"".concat(n).concat(t)}update(t){var{parent:e}=this,r=this.getProperty();if(this.initialValue||(this.initialValue=r.getString(),this.initialUnits=r.getUnits()),this.duration>this.maxDuration){var i=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==i||this.frozen){if("remove"===i&&!this.removed)return this.removed=!0,r.setValue(e.animationFrozen?e.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,e.animationFrozen=!0,e.animationFrozenValue=r.getString();return!1}this.duration+=t;var n=!1;if(this.begin<this.duration){var a=this.calcValue(),s=this.getAttribute("type");if(s.hasValue()){var o=s.getString();a="".concat(o,"(").concat(a,")")}r.setValue(a),n=!0}return n}getProgress(){var{document:t,values:e}=this,r={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(e.hasValue()){var i=r.progress*(e.getValue().length-1),n=Math.floor(i),a=Math.ceil(i);r.from=new H(t,"from",parseFloat(e.getValue()[n])),r.to=new H(t,"to",parseFloat(e.getValue()[a])),r.progress=(i-n)/(a-n)}else r.from=this.from,r.to=this.to;return r}}class Dt extends Lt{constructor(){super(...arguments),this.type="animateColor"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=new l.a(e.getColor()),n=new l.a(r.getColor());if(i.ok&&n.ok){var a=i.r+(n.r-i.r)*t,s=i.g+(n.g-i.g)*t,o=i.b+(n.b-i.b)*t;return"rgb(".concat(Math.floor(a),", ").concat(Math.floor(s),", ").concat(Math.floor(o),")")}return this.getAttribute("from").getColor()}}class Bt extends Lt{constructor(){super(...arguments),this.type="animateTransform"}calcValue(){var{progress:t,from:e,to:r}=this.getProgress(),i=m(e.getString()),n=m(r.getString());return i.map((e,r)=>e+(n[r]-e)*t).join(" ")}}class jt extends ot{constructor(t,e,r){super(t,e,r),this.type="font",this.glyphs={},this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber();var{definitions:i}=t,{children:n}=this;for(var a of n)switch(a.type){case"font-face":this.fontFace=a;var s=a.getStyle("font-family");s.hasValue()&&(i[s.getString()]=this);break;case"missing-glyph":this.missingGlyph=a;break;case"glyph":var o=a;o.arabicForm?(this.isRTL=!0,this.isArabic=!0,void 0===this.glyphs[o.unicode]&&(this.glyphs[o.unicode]={}),this.glyphs[o.unicode][o.arabicForm]=o):this.glyphs[o.unicode]=o}}render(){}}class zt extends ot{constructor(t,e,r){super(t,e,r),this.type="font-face",this.ascent=this.getAttribute("ascent").getNumber(),this.descent=this.getAttribute("descent").getNumber(),this.unitsPerEm=this.getAttribute("units-per-em").getNumber()}}class Ft extends vt{constructor(){super(...arguments),this.type="missing-glyph",this.horizAdvX=0}}class Ut extends mt{constructor(){super(...arguments),this.type="tref"}getText(){var t=this.getHrefAttribute().getDefinition();if(t){var e=t.children[0];if(e)return e.getText()}return""}}class Ht extends mt{constructor(t,e,r){super(t,e,r),this.type="a";var{childNodes:i}=e,n=i[0],a=i.length>0&&Array.from(i).every(t=>3===t.nodeType);this.hasText=a,this.text=a?this.getTextFromNode(n):""}getText(){return this.text}renderChildren(t){if(this.hasText){super.renderChildren(t);var{document:e,x:r,y:i}=this,{mouse:n}=e.screen,a=new H(e,"fontSize",ft.parse(e.ctx.font).fontSize);n.isWorking()&&n.checkBoundingBox(this,new gt(r,i-a.getPixels("y"),r+this.measureText(t),i))}else if(this.children.length>0){var s=new _t(this.document,null);s.children=this.children,s.parent=this,s.render(t)}}onClick(){var{window:t}=this.document;t&&t.open(this.getHrefAttribute().getString())}onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}function Xt(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function Yt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?Xt(Object(r),!0).forEach((function(e){o()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Xt(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}class qt extends mt{constructor(t,e,r){super(t,e,r),this.type="textPath",this.textWidth=0,this.textHeight=0,this.pathLength=-1,this.glyphInfo=null,this.letterSpacingCache=[],this.measuresCache=new Map([["",0]]);var i=this.getHrefAttribute().getDefinition();this.text=this.getTextFromNode(),this.dataArray=this.parsePathData(i)}getText(){return this.text}path(t){var{dataArray:e}=this;t&&t.beginPath(),e.forEach(e=>{var{type:r,points:i}=e;switch(r){case pt.LINE_TO:t&&t.lineTo(i[0],i[1]);break;case pt.MOVE_TO:t&&t.moveTo(i[0],i[1]);break;case pt.CURVE_TO:t&&t.bezierCurveTo(i[0],i[1],i[2],i[3],i[4],i[5]);break;case pt.QUAD_TO:t&&t.quadraticCurveTo(i[0],i[1],i[2],i[3]);break;case pt.ARC:var[n,a,s,o,u,h,c,l]=i,f=s>o?s:o,g=s>o?1:s/o,p=s>o?o/s:1;t&&(t.translate(n,a),t.rotate(c),t.scale(g,p),t.arc(0,0,f,u,u+h,Boolean(1-l)),t.scale(1/g,1/p),t.rotate(-c),t.translate(-n,-a));break;case pt.CLOSE_PATH:t&&t.closePath()}})}renderChildren(t){this.setTextData(t),t.save();var e=this.parent.getStyle("text-decoration").getString(),r=this.getFontSize(),{glyphInfo:i}=this,n=t.fillStyle;"underline"===e&&t.beginPath(),i.forEach((i,n)=>{var{p0:a,p1:s,rotation:o,text:u}=i;t.save(),t.translate(a.x,a.y),t.rotate(o),t.fillStyle&&t.fillText(u,0,0),t.strokeStyle&&t.strokeText(u,0,0),t.restore(),"underline"===e&&(0===n&&t.moveTo(a.x,a.y+r/8),t.lineTo(s.x,s.y+r/5))}),"underline"===e&&(t.lineWidth=r/20,t.strokeStyle=n,t.stroke(),t.closePath()),t.restore()}getLetterSpacingAt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[t]||0}findSegmentToFitChar(t,e,r,i,n,a,s,o,u){var h=a,c=this.measureText(t,o);" "===o&&"justify"===e&&r<i&&(c+=(i-r)/n),u>-1&&(h+=this.getLetterSpacingAt(u));var l=this.textHeight/20,f=this.getEquidistantPointOnPath(h,l,0),g=this.getEquidistantPointOnPath(h+c,l,0),p={p0:f,p1:g},d=f&&g?Math.atan2(g.y-f.y,g.x-f.x):0;if(s){var v=Math.cos(Math.PI/2+d)*s,y=Math.cos(-d)*s;p.p0=Yt(Yt({},f),{},{x:f.x+v,y:f.y+y}),p.p1=Yt(Yt({},g),{},{x:g.x+v,y:g.y+y})}return{offset:h+=c,segment:p,rotation:d}}measureText(t,e){var{measuresCache:r}=this,i=e||this.getText();if(r.has(i))return r.get(i);var n=this.measureTargetText(t,i);return r.set(i,n),n}setTextData(t){if(!this.glyphInfo){var e=this.getText(),r=e.split(""),i=e.split(" ").length-1,n=this.parent.getAttribute("dx").split().map(t=>t.getPixels("x")),a=this.parent.getAttribute("dy").getPixels("y"),s=this.parent.getStyle("text-anchor").getString("start"),o=this.getStyle("letter-spacing"),u=this.parent.getStyle("letter-spacing"),h=0;o.hasValue()&&"inherit"!==o.getValue()?o.hasValue()&&"initial"!==o.getValue()&&"unset"!==o.getValue()&&(h=o.getPixels()):h=u.getPixels();var c=[],l=e.length;this.letterSpacingCache=c;for(var f=0;f<l;f++)c.push(void 0!==n[f]?n[f]:h);var g=c.reduce((t,e,r)=>0===r?0:t+e||0,0),p=this.measureText(t),d=Math.max(p+g,0);this.textWidth=p,this.textHeight=this.getFontSize(),this.glyphInfo=[];var v=this.getPathLength(),y=this.getStyle("startOffset").getNumber(0)*v,m=0;"middle"!==s&&"center"!==s||(m=-d/2),"end"!==s&&"right"!==s||(m=-d),m+=y,r.forEach((e,n)=>{var{offset:o,segment:u,rotation:h}=this.findSegmentToFitChar(t,s,d,v,i,m,a,e,n);m=o,u.p0&&u.p1&&this.glyphInfo.push({text:r[n],p0:u.p0,p1:u.p1,rotation:h})})}}parsePathData(t){if(this.pathLength=-1,!t)return[];var e=[],{pathParser:r}=t;for(r.reset();!r.isEnd();){var{current:i}=r,n=i?i.x:0,a=i?i.y:0,s=r.next(),o=s.type,u=[];switch(s.type){case pt.MOVE_TO:this.pathM(r,u);break;case pt.LINE_TO:o=this.pathL(r,u);break;case pt.HORIZ_LINE_TO:o=this.pathH(r,u);break;case pt.VERT_LINE_TO:o=this.pathV(r,u);break;case pt.CURVE_TO:this.pathC(r,u);break;case pt.SMOOTH_CURVE_TO:o=this.pathS(r,u);break;case pt.QUAD_TO:this.pathQ(r,u);break;case pt.SMOOTH_QUAD_TO:o=this.pathT(r,u);break;case pt.ARC:u=this.pathA(r);break;case pt.CLOSE_PATH:vt.pathZ(r)}s.type!==pt.CLOSE_PATH?e.push({type:o,points:u,start:{x:n,y:a},pathLength:this.calcLength(n,a,o,u)}):e.push({type:pt.CLOSE_PATH,points:[],pathLength:0})}return e}pathM(t,e){var{x:r,y:i}=vt.pathM(t).point;e.push(r,i)}pathL(t,e){var{x:r,y:i}=vt.pathL(t).point;return e.push(r,i),pt.LINE_TO}pathH(t,e){var{x:r,y:i}=vt.pathH(t).point;return e.push(r,i),pt.LINE_TO}pathV(t,e){var{x:r,y:i}=vt.pathV(t).point;return e.push(r,i),pt.LINE_TO}pathC(t,e){var{point:r,controlPoint:i,currentPoint:n}=vt.pathC(t);e.push(r.x,r.y,i.x,i.y,n.x,n.y)}pathS(t,e){var{point:r,controlPoint:i,currentPoint:n}=vt.pathS(t);return e.push(r.x,r.y,i.x,i.y,n.x,n.y),pt.CURVE_TO}pathQ(t,e){var{controlPoint:r,currentPoint:i}=vt.pathQ(t);e.push(r.x,r.y,i.x,i.y)}pathT(t,e){var{controlPoint:r,currentPoint:i}=vt.pathT(t);return e.push(r.x,r.y,i.x,i.y),pt.QUAD_TO}pathA(t){var{rX:e,rY:r,sweepFlag:i,xAxisRotation:n,centp:a,a1:s,ad:o}=vt.pathA(t);return 0===i&&o>0&&(o-=2*Math.PI),1===i&&o<0&&(o+=2*Math.PI),[a.x,a.y,e,r,s,o,n,i]}calcLength(t,e,r,i){var n=0,a=null,s=null,o=0;switch(r){case pt.LINE_TO:return this.getLineLength(t,e,i[0],i[1]);case pt.CURVE_TO:for(n=0,a=this.getPointOnCubicBezier(0,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),o=.01;o<=1;o+=.01)s=this.getPointOnCubicBezier(o,t,e,i[0],i[1],i[2],i[3],i[4],i[5]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case pt.QUAD_TO:for(n=0,a=this.getPointOnQuadraticBezier(0,t,e,i[0],i[1],i[2],i[3]),o=.01;o<=1;o+=.01)s=this.getPointOnQuadraticBezier(o,t,e,i[0],i[1],i[2],i[3]),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return n;case pt.ARC:n=0;var u=i[4],h=i[5],c=i[4]+h,l=Math.PI/180;if(Math.abs(u-c)<l&&(l=Math.abs(u-c)),a=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],u,0),h<0)for(o=u-l;o>c;o-=l)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;else for(o=u+l;o<c;o+=l)s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],o,0),n+=this.getLineLength(a.x,a.y,s.x,s.y),a=s;return s=this.getPointOnEllipticalArc(i[0],i[1],i[2],i[3],c,0),n+=this.getLineLength(a.x,a.y,s.x,s.y)}return 0}getPointOnLine(t,e,r,i,n){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:e,s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r,o=(n-r)/(i-e+V),u=Math.sqrt(t*t/(1+o*o));i<e&&(u*=-1);var h=o*u,c=null;if(i===e)c={x:a,y:s+h};else if((s-r)/(a-e+V)===o)c={x:a+u,y:s+h};else{var l,f,g=this.getLineLength(e,r,i,n);if(g<V)return null;var p=(a-e)*(i-e)+(s-r)*(n-r);l=e+(p/=g*g)*(i-e),f=r+p*(n-r);var d=this.getLineLength(a,s,l,f),v=Math.sqrt(t*t-d*d);u=Math.sqrt(v*v/(1+o*o)),i<e&&(u*=-1),c={x:l+u,y:f+(h=o*u)}}return c}getPointOnPath(t){var e=this.getPathLength(),r=0,i=null;if(t<-5e-5||t-5e-5>e)return null;var{dataArray:n}=this;for(var a of n){if(!a||!(a.pathLength<5e-5||r+a.pathLength+5e-5<t)){var s=t-r,o=0;switch(a.type){case pt.LINE_TO:i=this.getPointOnLine(s,a.start.x,a.start.y,a.points[0],a.points[1],a.start.x,a.start.y);break;case pt.ARC:var u=a.points[4],h=a.points[5],c=a.points[4]+h;if(o=u+s/a.pathLength*h,h<0&&o<c||h>=0&&o>c)break;i=this.getPointOnEllipticalArc(a.points[0],a.points[1],a.points[2],a.points[3],o,a.points[6]);break;case pt.CURVE_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnCubicBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3],a.points[4],a.points[5]);break;case pt.QUAD_TO:(o=s/a.pathLength)>1&&(o=1),i=this.getPointOnQuadraticBezier(o,a.start.x,a.start.y,a.points[0],a.points[1],a.points[2],a.points[3])}if(i)return i;break}r+=a.pathLength}return null}getLineLength(t,e,r,i){return Math.sqrt((r-t)*(r-t)+(i-e)*(i-e))}getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce((t,e)=>e.pathLength>0?t+e.pathLength:t,0)),this.pathLength}getPointOnCubicBezier(t,e,r,i,n,a,s,o,u){return{x:o*L(t)+a*D(t)+i*B(t)+e*j(t),y:u*L(t)+s*D(t)+n*B(t)+r*j(t)}}getPointOnQuadraticBezier(t,e,r,i,n,a,s){return{x:a*z(t)+i*F(t)+e*U(t),y:s*z(t)+n*F(t)+r*U(t)}}getPointOnEllipticalArc(t,e,r,i,n,a){var s=Math.cos(a),o=Math.sin(a),u=r*Math.cos(n),h=i*Math.sin(n);return{x:t+(u*s-h*o),y:e+(u*o+h*s)}}buildEquidistantCache(t,e){var r=this.getPathLength(),i=e||.25,n=t||r/100;if(!this.equidistantCache||this.equidistantCache.step!==n||this.equidistantCache.precision!==i){this.equidistantCache={step:n,precision:i,points:[]};for(var a=0,s=0;s<=r;s+=i){var o=this.getPointOnPath(s),u=this.getPointOnPath(s+i);o&&u&&((a+=this.getLineLength(o.x,o.y,u.x,u.y))>=n&&(this.equidistantCache.points.push({x:o.x,y:o.y,distance:s}),a-=n))}}}getEquidistantPointOnPath(t,e,r){if(this.buildEquidistantCache(e,r),t<0||t-this.getPathLength()>5e-5)return null;var i=Math.round(t/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[i]||null}}var Wt=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;class Gt extends dt{constructor(t,e,r){super(t,e,r),this.type="image",this.loaded=!1;var i=this.getHrefAttribute().getString();if(i){var n=i.endsWith(".svg")||/^\s*data:image\/svg\+xml/i.test(i);t.images.push(this),n?this.loadSvg(i):this.loadImage(i),this.isSvg=n}}loadImage(t){var e=this;return a()((function*(){try{var r=yield e.document.createImage(t);e.image=r}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}loadSvg(t){var e=this;return a()((function*(){var r=Wt.exec(t);if(r){var i=r[5];"base64"===r[4]?e.image=atob(i):e.image=decodeURIComponent(i)}else try{var n=yield e.document.fetch(t),a=yield n.text();e.image=a}catch(e){console.error('Error while loading image "'.concat(t,'":'),e)}e.loaded=!0}))()}renderChildren(t){var{document:e,image:r,loaded:i}=this,n=this.getAttribute("x").getPixels("x"),a=this.getAttribute("y").getPixels("y"),s=this.getStyle("width").getPixels("x"),o=this.getStyle("height").getPixels("y");if(i&&r&&s&&o){if(t.save(),t.translate(n,a),this.isSvg){var u=e.canvg.forkString(t,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:0,offsetY:0,scaleWidth:s,scaleHeight:o});u.document.documentElement.parent=this,u.render()}else{var h=this.image;e.setViewBox({ctx:t,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:s,desiredWidth:h.width,height:o,desiredHeight:h.height}),this.loaded&&(void 0===h.complete||h.complete)&&t.drawImage(h,0,0)}t.restore()}}getBoundingBox(){var t=this.getAttribute("x").getPixels("x"),e=this.getAttribute("y").getPixels("y"),r=this.getStyle("width").getPixels("x"),i=this.getStyle("height").getPixels("y");return new gt(t,e,t+r,e+i)}}class Qt extends dt{constructor(){super(...arguments),this.type="symbol"}render(t){}}class $t{constructor(t){this.document=t,this.loaded=!1,t.fonts.push(this)}load(t,e){var r=this;return a()((function*(){try{var{document:i}=r,n=(yield i.canvg.parser.load(e)).getElementsByTagName("font");Array.from(n).forEach(e=>{var r=i.createElement(e);i.definitions[t]=r})}catch(t){console.error('Error while loading font "'.concat(e,'":'),t)}r.loaded=!0}))()}}class Zt extends ot{constructor(t,e,r){super(t,e,r),this.type="style",d(Array.from(e.childNodes).map(t=>t.textContent).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}").forEach(e=>{var r=e.trim();if(r){var i=r.split("{"),n=i[0].split(","),a=i[1].split(";");n.forEach(e=>{var r=e.trim();if(r){var i=t.styles[r]||{};if(a.forEach(e=>{var r=e.indexOf(":"),n=e.substr(0,r).trim(),a=e.substr(r+1,e.length-r).trim();n&&a&&(i[n]=new H(t,n,a))}),t.styles[r]=i,t.stylesSpecificity[r]=_(r),"@font-face"===r){var n=i["font-family"].getString().replace(/"|'/g,"");i.src.getString().split(",").forEach(e=>{if(e.indexOf('format("svg")')>0){var r=w(e);r&&new $t(t).load(n,r)}})}}})}})}}Zt.parseExternalUrl=w;class Kt extends dt{constructor(){super(...arguments),this.type="use"}setContext(t){super.setContext(t);var e=this.getAttribute("x"),r=this.getAttribute("y");e.hasValue()&&t.translate(e.getPixels("x"),0),r.hasValue()&&t.translate(0,r.getPixels("y"))}path(t){var{element:e}=this;e&&e.path(t)}renderChildren(t){var{document:e,element:r}=this;if(r){var i=r;if("symbol"===r.type&&((i=new wt(e,null)).attributes.viewBox=new H(e,"viewBox",r.getAttribute("viewBox").getString()),i.attributes.preserveAspectRatio=new H(e,"preserveAspectRatio",r.getAttribute("preserveAspectRatio").getString()),i.attributes.overflow=new H(e,"overflow",r.getAttribute("overflow").getString()),i.children=r.children,r.styles.opacity=new H(e,"opacity",this.calculateOpacity())),"svg"===i.type){var n=this.getStyle("width",!1,!0),a=this.getStyle("height",!1,!0);n.hasValue()&&(i.attributes.width=new H(e,"width",n.getString())),a.hasValue()&&(i.attributes.height=new H(e,"height",a.getString()))}var s=i.parent;i.parent=this,i.render(t),i.parent=s}}getBoundingBox(t){var{element:e}=this;return e?e.getBoundingBox(t):null}elementTransform(){var{document:t,element:e}=this;return st.fromElement(t,e)}get element(){return this.cachedElement||(this.cachedElement=this.getHrefAttribute().getDefinition()),this.cachedElement}}function Jt(t,e,r,i,n,a){return t[r*i*4+4*e+a]}function te(t,e,r,i,n,a,s){t[r*i*4+4*e+a]=s}function ee(t,e,r){return t[e]*r}function re(t,e,r,i){return e+Math.cos(t)*r+Math.sin(t)*i}class ie extends ot{constructor(t,e,r){super(t,e,r),this.type="feColorMatrix";var i=m(this.getAttribute("values").getString());switch(this.getAttribute("type").getString("matrix")){case"saturate":var n=i[0];i=[.213+.787*n,.715-.715*n,.072-.072*n,0,0,.213-.213*n,.715+.285*n,.072-.072*n,0,0,.213-.213*n,.715-.715*n,.072+.928*n,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var a=i[0]*Math.PI/180;i=[re(a,.213,.787,-.213),re(a,.715,-.715,-.715),re(a,.072,-.072,.928),0,0,re(a,.213,-.213,.143),re(a,.715,.285,.14),re(a,.072,-.072,-.283),0,0,re(a,.213,-.213,-.787),re(a,.715,-.715,.715),re(a,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}this.matrix=i,this.includeOpacity=this.getAttribute("includeOpacity").hasValue()}apply(t,e,r,i,n){for(var{includeOpacity:a,matrix:s}=this,o=t.getImageData(0,0,i,n),u=0;u<n;u++)for(var h=0;h<i;h++){var c=Jt(o.data,h,u,i,0,0),l=Jt(o.data,h,u,i,0,1),f=Jt(o.data,h,u,i,0,2),g=Jt(o.data,h,u,i,0,3),p=ee(s,0,c)+ee(s,1,l)+ee(s,2,f)+ee(s,3,g)+ee(s,4,1),d=ee(s,5,c)+ee(s,6,l)+ee(s,7,f)+ee(s,8,g)+ee(s,9,1),v=ee(s,10,c)+ee(s,11,l)+ee(s,12,f)+ee(s,13,g)+ee(s,14,1),y=ee(s,15,c)+ee(s,16,l)+ee(s,17,f)+ee(s,18,g)+ee(s,19,1);a&&(p=0,d=0,v=0,y*=g/255),te(o.data,h,u,i,0,0,p),te(o.data,h,u,i,0,1,d),te(o.data,h,u,i,0,2,v),te(o.data,h,u,i,0,3,y)}t.clearRect(0,0,i,n),t.putImageData(o,0,0)}}class ne extends ot{constructor(){super(...arguments),this.type="mask"}apply(t,e){var{document:r}=this,i=this.getAttribute("x").getPixels("x"),n=this.getAttribute("y").getPixels("y"),a=this.getStyle("width").getPixels("x"),s=this.getStyle("height").getPixels("y");if(!a&&!s){var o=new gt;this.children.forEach(e=>{o.addBoundingBox(e.getBoundingBox(t))}),i=Math.floor(o.x1),n=Math.floor(o.y1),a=Math.floor(o.width),s=Math.floor(o.height)}var u=this.removeStyles(e,ne.ignoreStyles),h=r.createCanvas(i+a,n+s),c=h.getContext("2d");r.screen.setDefaults(c),this.renderChildren(c),new ie(r,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(c,0,0,i+a,n+s);var l=r.createCanvas(i+a,n+s),f=l.getContext("2d");r.screen.setDefaults(f),e.render(f),f.globalCompositeOperation="destination-in",f.fillStyle=c.createPattern(h,"no-repeat"),f.fillRect(0,0,i+a,n+s),t.fillStyle=f.createPattern(l,"no-repeat"),t.fillRect(0,0,i+a,n+s),this.restoreStyles(e,u)}render(t){}}ne.ignoreStyles=["mask","transform","clip-path"];var ae=()=>{};class se extends ot{constructor(){super(...arguments),this.type="clipPath"}apply(t){var{document:e}=this,r=Reflect.getPrototypeOf(t),{beginPath:i,closePath:n}=t;r&&(r.beginPath=ae,r.closePath=ae),Reflect.apply(i,t,[]),this.children.forEach(i=>{if(void 0!==i.path){var a=void 0!==i.elementTransform?i.elementTransform():null;a||(a=st.fromElement(e,i)),a&&a.apply(t),i.path(t),r&&(r.closePath=n),a&&a.unapply(t)}}),Reflect.apply(n,t,[]),t.clip(),r&&(r.beginPath=i,r.closePath=n)}render(t){}}class oe extends ot{constructor(){super(...arguments),this.type="filter"}apply(t,e){var{document:r,children:i}=this,n=e.getBoundingBox(t);if(n){var a=0,s=0;i.forEach(t=>{var e=t.extraFilterDistance||0;a=Math.max(a,e),s=Math.max(s,e)});var o=Math.floor(n.width),u=Math.floor(n.height),h=o+2*a,c=u+2*s;if(!(h<1||c<1)){var l=Math.floor(n.x),f=Math.floor(n.y),g=this.removeStyles(e,oe.ignoreStyles),p=r.createCanvas(h,c),d=p.getContext("2d");r.screen.setDefaults(d),d.translate(-l+a,-f+s),e.render(d),i.forEach(t=>{"function"==typeof t.apply&&t.apply(d,0,0,h,c)}),t.drawImage(p,0,0,h,c,l-a,f-s,h,c),this.restoreStyles(e,g)}}}render(t){}}oe.ignoreStyles=["filter","transform","clip-path"];class ue extends ot{constructor(t,e,r){super(t,e,r),this.type="feDropShadow",this.addStylesFromStyleDefinition()}apply(t,e,r,i,n){}}class he extends ot{constructor(){super(...arguments),this.type="feMorphology"}apply(t,e,r,i,n){}}class ce extends ot{constructor(){super(...arguments),this.type="feComposite"}apply(t,e,r,i,n){}}class le extends ot{constructor(t,e,r){super(t,e,r),this.type="feGaussianBlur",this.blurRadius=Math.floor(this.getAttribute("stdDeviation").getNumber()),this.extraFilterDistance=this.blurRadius}apply(t,e,r,i,n){var{document:a,blurRadius:s}=this,o=a.window?a.window.document.body:null,u=t.canvas;u.id=a.getUniqueId(),o&&(u.style.display="none",o.appendChild(u)),Object(g.a)(u,e,r,i,n,s),o&&o.removeChild(u)}}class fe extends ot{constructor(){super(...arguments),this.type="title"}}class ge extends ot{constructor(){super(...arguments),this.type="desc"}}var pe={svg:wt,rect:St,circle:Tt,ellipse:At,line:Ot,polyline:Pt,polygon:Et,path:vt,pattern:Ct,marker:Mt,defs:Nt,linearGradient:Rt,radialGradient:kt,stop:It,animate:Lt,animateColor:Dt,animateTransform:Bt,font:jt,"font-face":zt,"missing-glyph":Ft,glyph:yt,text:mt,tspan:xt,tref:Ut,a:Ht,textPath:qt,image:Gt,g:_t,symbol:Qt,style:Zt,use:Kt,mask:ne,clipPath:se,filter:oe,feDropShadow:ue,feMorphology:he,feComposite:ce,feColorMatrix:ie,feGaussianBlur:le,title:fe,desc:ge};function de(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function ve(){return(ve=a()((function*(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=document.createElement("img");return r&&(i.crossOrigin="Anonymous"),new t((t,r)=>{i.onload=()=>{t(i)},i.onerror=(t,e,i,n,a)=>{r(a)},i.src=e})}))).apply(this,arguments)}class ye{constructor(t){var{rootEmSize:e=12,emSize:r=12,createCanvas:i=ye.createCanvas,createImage:n=ye.createImage,anonymousCrossOrigin:a}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.canvg=t,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=t.screen,this.rootEmSize=e,this.emSize=r,this.createCanvas=i,this.createImage=this.bindCreateImage(n,a),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}bindCreateImage(t,e){return"boolean"==typeof e?(r,i)=>t(r,"boolean"==typeof i?i:e):t}get window(){return this.screen.window}get fetch(){return this.screen.fetch}get ctx(){return this.screen.ctx}get emSize(){var{emSizeStack:t}=this;return t[t.length-1]}set emSize(t){var{emSizeStack:e}=this;e.push(t)}popEmSize(){var{emSizeStack:t}=this;t.pop()}getUniqueId(){return"canvg".concat(++this.uniqueId)}isImagesLoaded(){return this.images.every(t=>t.loaded)}isFontsLoaded(){return this.fonts.every(t=>t.loaded)}createDocumentElement(t){var e=this.createElement(t.documentElement);return e.root=!0,e.addStylesFromStyleDefinition(),this.documentElement=e,e}createElement(t){var e=t.nodeName.replace(/^[^:]+:/,""),r=ye.elementTypes[e];return void 0!==r?new r(this,t):new ut(this,t)}createTextNode(t){return new bt(this,t)}setViewBox(t){this.screen.setViewBox(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?de(Object(r),!0).forEach((function(e){o()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):de(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({document:this},t))}}function me(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function xe(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?me(Object(r),!0).forEach((function(e){o()(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):me(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}ye.createCanvas=function(t,e){var r=document.createElement("canvas");return r.width=t,r.height=e,r},ye.createImage=function(t){return ve.apply(this,arguments)},ye.elementTypes=pe;class be{constructor(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.parser=new K(r),this.screen=new Q(t,r),this.options=r;var i=new ye(this,r),n=i.createDocumentElement(e);this.document=i,this.documentElement=n}static from(t,e){var r=arguments;return a()((function*(){var i=r.length>2&&void 0!==r[2]?r[2]:{},n=new K(i),a=yield n.parse(e);return new be(t,a,i)}))()}static fromString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new K(r).parseFromString(e);return new be(t,i,r)}fork(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return be.from(t,e,xe(xe({},this.options),r))}forkString(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return be.fromString(t,e,xe(xe({},this.options),r))}ready(){return this.screen.ready()}isReady(){return this.screen.isReady()}render(){var t=arguments,e=this;return a()((function*(){var r=t.length>0&&void 0!==t[0]?t[0]:{};e.start(xe({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},r)),yield e.ready(),e.stop()}))()}start(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{documentElement:e,screen:r,options:i}=this;r.start(e,xe(xe({enableRedraw:!0},i),t))}stop(){this.screen.stop()}resize(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(t,e,r)}}e.default=be}.call(this,r(5),r(18))},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,r(8))},function(t,e){var r=Function.prototype,i=r.bind,n=r.call,a=i&&i.bind(n);t.exports=i?function(t){return t&&a(n,t)}:function(t){return t&&function(){return n.apply(t,arguments)}}},function(t,e){t.exports=function(t){return"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var i=r(151),n=r(190),a=r(160),s=r(211),o=r(210),u=r(209),h=n("wks"),c=i.Symbol,l=c&&c.for,f=u?c:c&&c.withoutSetter||s;t.exports=function(t){if(!a(h,t)||!o&&"string"!=typeof h[t]){var e="Symbol."+t;o&&a(c,t)?h[t]=c[t]:h[t]=u&&l?l(e):f(e)}return h[t]}},function(t,e,r){var i=r(151),n=r(162),a=i.String,s=i.TypeError;t.exports=function(t){if(n(t))return t;throw s(a(t)+" is not an object")}},function(t,e){var r=Function.prototype.call;t.exports=r.bind?r.bind(r):function(){return r.apply(r,arguments)}},function(t,e,r){var i=r(151),n=r(173).f,a=r(170),s=r(165),o=r(192),u=r(237),h=r(215);t.exports=function(t,e){var r,c,l,f,g,p=t.target,d=t.global,v=t.stat;if(r=d?i:v?i[p]||o(p,{}):(i[p]||{}).prototype)for(c in e){if(f=e[c],l=t.noTargetGet?(g=n(r,c))&&g.value:r[c],!h(d?c:p+(v?".":"#")+c,t.forced)&&void 0!==l){if(typeof f==typeof l)continue;u(f,l)}(t.sham||l&&l.sham)&&a(f,"sham",!0),s(r,c,f,t)}}},function(t,e,r){var i=r(151).TypeError;t.exports=function(t){if(null==t)throw i("Can't call method on "+t);return t}},function(t,e,r){var i=r(152),n=r(179),a=i({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return a(n(t),e)}},function(t,e,r){var i=r(151),n=r(199),a=i.String;t.exports=function(t){if("Symbol"===n(t))throw TypeError("Cannot convert a Symbol value to a string");return a(t)}},function(t,e,r){var i=r(153);t.exports=function(t){return"object"==typeof t?null!==t:i(t)}},function(t,e,r){var i=r(154);t.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,r){var i=r(151),n=r(153),a=function(t){return n(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?a(i[t]):i[t]&&i[t][e]}},function(t,e,r){var i=r(151),n=r(153),a=r(160),s=r(170),o=r(192),u=r(181),h=r(182),c=r(183).CONFIGURABLE,l=h.get,f=h.enforce,g=String(String).split("String");(t.exports=function(t,e,r,u){var h,l=!!u&&!!u.unsafe,p=!!u&&!!u.enumerable,d=!!u&&!!u.noTargetGet,v=u&&void 0!==u.name?u.name:e;n(r)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!a(r,"name")||c&&r.name!==v)&&s(r,"name",v),(h=f(r)).source||(h.source=g.join("string"==typeof v?v:""))),t!==i?(l?!d&&t[e]&&(p=!0):delete t[e],p?t[e]=r:s(t,e,r)):p?t[e]=r:o(e,r)})(Function.prototype,"toString",(function(){return n(this)&&l(this).source||u(this)}))},function(t,e,r){var i=r(152),n=i({}.toString),a=i("".slice);t.exports=function(t){return a(n(t),8,-1)}},function(t,e,r){var i=r(168);t.exports=function(t,e){var r=t[e];return null==r?void 0:i(r)}},function(t,e,r){var i=r(151),n=r(153),a=r(178),s=i.TypeError;t.exports=function(t){if(n(t))return t;throw s(a(t)+" is not a function")}},function(t,e){t.exports=!1},function(t,e,r){var i=r(163),n=r(171),a=r(188);t.exports=i?function(t,e,r){return n.f(t,e,a(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var i=r(151),n=r(163),a=r(212),s=r(156),o=r(207),u=i.TypeError,h=Object.defineProperty;e.f=n?h:function(t,e,r){if(s(t),e=o(e),s(r),a)try{return h(t,e,r)}catch(t){}if("get"in r||"set"in r)throw u("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var i=r(184),n=Math.min;t.exports=function(t){return t>0?n(i(t),9007199254740991):0}},function(t,e,r){var i=r(163),n=r(157),a=r(233),s=r(188),o=r(174),u=r(207),h=r(160),c=r(212),l=Object.getOwnPropertyDescriptor;e.f=i?l:function(t,e){if(t=o(t),e=u(e),c)try{return l(t,e)}catch(t){}if(h(t,e))return s(!n(a.f,t,e),t[e])}},function(t,e,r){var i=r(206),n=r(159);t.exports=function(t){return i(n(t))}},function(t,e){t.exports={}},function(t,e,r){var i=r(152);t.exports=i({}.isPrototypeOf)},function(t,e,r){var i=r(164);t.exports=i("navigator","userAgent")||""},function(t,e,r){var i=r(151).String;t.exports=function(t){try{return i(t)}catch(t){return"Object"}}},function(t,e,r){var i=r(151),n=r(159),a=i.Object;t.exports=function(t){return a(n(t))}},function(t,e,r){var i=r(151),n=r(162),a=i.document,s=n(a)&&n(a.createElement);t.exports=function(t){return s?a.createElement(t):{}}},function(t,e,r){var i=r(152),n=r(153),a=r(191),s=i(Function.toString);n(a.inspectSource)||(a.inspectSource=function(t){return s(t)}),t.exports=a.inspectSource},function(t,e,r){var i,n,a,s=r(236),o=r(151),u=r(152),h=r(162),c=r(170),l=r(160),f=r(191),g=r(193),p=r(194),d=o.TypeError,v=o.WeakMap;if(s||f.state){var y=f.state||(f.state=new v),m=u(y.get),x=u(y.has),b=u(y.set);i=function(t,e){if(x(y,t))throw new d("Object already initialized");return e.facade=t,b(y,t,e),e},n=function(t){return m(y,t)||{}},a=function(t){return x(y,t)}}else{var w=g("state");p[w]=!0,i=function(t,e){if(l(t,w))throw new d("Object already initialized");return e.facade=t,c(t,w,e),e},n=function(t){return l(t,w)?t[w]:{}},a=function(t){return l(t,w)}}t.exports={set:i,get:n,has:a,enforce:function(t){return a(t)?n(t):i(t,{})},getterFor:function(t){return function(e){var r;if(!h(e)||(r=n(e)).type!==t)throw d("Incompatible receiver, "+t+" required");return r}}}},function(t,e,r){var i=r(163),n=r(160),a=Function.prototype,s=i&&Object.getOwnPropertyDescriptor,o=n(a,"name"),u=o&&"something"===function(){}.name,h=o&&(!i||i&&s(a,"name").configurable);t.exports={EXISTS:o,PROPER:u,CONFIGURABLE:h}},function(t,e){var r=Math.ceil,i=Math.floor;t.exports=function(t){var e=+t;return e!=e||0===e?0:(e>0?i:r)(e)}},function(t,e,r){var i=r(166),n=r(151);t.exports="process"==i(n.process)},function(t,e,r){"use strict";var i,n,a=r(157),s=r(152),o=r(161),u=r(224),h=r(225),c=r(190),l=r(187),f=r(182).get,g=r(267),p=r(268),d=c("native-string-replace",String.prototype.replace),v=RegExp.prototype.exec,y=v,m=s("".charAt),x=s("".indexOf),b=s("".replace),w=s("".slice),S=(n=/b*/g,a(v,i=/a/,"a"),a(v,n,"a"),0!==i.lastIndex||0!==n.lastIndex),T=h.UNSUPPORTED_Y||h.BROKEN_CARET,A=void 0!==/()??/.exec("")[1];(S||A||T||g||p)&&(y=function(t){var e,r,i,n,s,h,c,g=this,p=f(g),O=o(t),P=p.raw;if(P)return P.lastIndex=g.lastIndex,e=a(y,P,O),g.lastIndex=P.lastIndex,e;var E=p.groups,C=T&&g.sticky,M=a(u,g),N=g.source,_=0,V=O;if(C&&(M=b(M,"y",""),-1===x(M,"g")&&(M+="g"),V=w(O,g.lastIndex),g.lastIndex>0&&(!g.multiline||g.multiline&&"\n"!==m(O,g.lastIndex-1))&&(N="(?: "+N+")",V=" "+V,_++),r=new RegExp("^(?:"+N+")",M)),A&&(r=new RegExp("^"+N+"$(?!\\s)",M)),S&&(i=g.lastIndex),n=a(v,C?r:g,V),C?n?(n.input=w(n.input,_),n[0]=w(n[0],_),n.index=g.lastIndex,g.lastIndex+=n[0].length):g.lastIndex=0:S&&n&&(g.lastIndex=g.global?n.index+n[0].length:i),A&&n&&n.length>1&&a(d,n[0],r,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(n[s]=void 0)})),n&&E)for(n.groups=h=l(null),s=0;s<E.length;s++)h[(c=E[s])[0]]=n[c[1]];return n}),t.exports=y},function(t,e,r){var i,n=r(156),a=r(265),s=r(196),o=r(194),u=r(220),h=r(180),c=r(193),l=c("IE_PROTO"),f=function(){},g=function(t){return"<script>"+t+"<\/script>"},p=function(t){t.write(g("")),t.close();var e=t.parentWindow.Object;return t=null,e},d=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,e;d="undefined"!=typeof document?document.domain&&i?p(i):((e=h("iframe")).style.display="none",u.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(g("document.F=Object")),t.close(),t.F):p(i);for(var r=s.length;r--;)delete d.prototype[s[r]];return d()};o[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(f.prototype=n(t),r=new f,f.prototype=null,r[l]=t):r=d(),void 0===e?r:a(r,e)}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var i,n,a=r(151),s=r(177),o=a.process,u=a.Deno,h=o&&o.versions||u&&u.version,c=h&&h.v8;c&&(n=(i=c.split("."))[0]>0&&i[0]<4?1:+(i[0]+i[1])),!n&&s&&(!(i=s.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=s.match(/Chrome\/(\d+)/))&&(n=+i[1]),t.exports=n},function(t,e,r){var i=r(169),n=r(191);(t.exports=function(t,e){return n[t]||(n[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.19.1",mode:i?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){var i=r(151),n=r(192),a=i["__core-js_shared__"]||n("__core-js_shared__",{});t.exports=a},function(t,e,r){var i=r(151),n=Object.defineProperty;t.exports=function(t,e){try{n(i,t,{value:e,configurable:!0,writable:!0})}catch(r){i[t]=e}return e}},function(t,e,r){var i=r(190),n=r(211),a=i("keys");t.exports=function(t){return a[t]||(a[t]=n(t))}},function(t,e){t.exports={}},function(t,e,r){var i=r(172);t.exports=function(t){return i(t.length)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,r){var i=r(171).f,n=r(160),a=r(155)("toStringTag");t.exports=function(t,e,r){t&&!n(t=r?t:t.prototype,a)&&i(t,a,{configurable:!0,value:e})}},function(t,e,r){var i=r(152),n=r(168),a=i(i.bind);t.exports=function(t,e){return n(t),void 0===e?t:a?a(t,e):function(){return t.apply(e,arguments)}}},function(t,e,r){var i=r(151),n=r(250),a=r(153),s=r(166),o=r(155)("toStringTag"),u=i.Object,h="Arguments"==s(function(){return arguments}());t.exports=n?s:function(t){var e,r,i;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=u(t),o))?r:h?s(e):"Object"==(i=s(e))&&a(e.callee)?"Arguments":i}},function(t,e){var r=Function.prototype,i=r.apply,n=r.bind,a=r.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},function(t,e,r){"use strict";r(264);var i=r(152),n=r(165),a=r(186),s=r(154),o=r(155),u=r(170),h=o("species"),c=RegExp.prototype;t.exports=function(t,e,r,l){var f=o(t),g=!s((function(){var e={};return e[f]=function(){return 7},7!=""[t](e)})),p=g&&!s((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[h]=function(){return r},r.flags="",r[f]=/./[f]),r.exec=function(){return e=!0,null},r[f](""),!e}));if(!g||!p||r){var d=i(/./[f]),v=e(f,""[t],(function(t,e,r,n,s){var o=i(t),u=e.exec;return u===a||u===c.exec?g&&!s?{done:!0,value:d(e,r,n)}:{done:!0,value:o(r,e,n)}:{done:!1}}));n(String.prototype,t,v[0]),n(c,f,v[1])}l&&u(c[f],"sham",!0)}},function(t,e,r){"use strict";var i=r(269).charAt;t.exports=function(t,e,r){return e+(r?i(t,e).length:1)}},function(t,e,r){var i=r(151),n=r(157),a=r(156),s=r(153),o=r(166),u=r(186),h=i.TypeError;t.exports=function(t,e){var r=t.exec;if(s(r)){var i=n(r,t,e);return null!==i&&a(i),i}if("RegExp"===o(t))return n(u,t,e);throw h("RegExp#exec called on incompatible receiver")}},function(t,e,r){var i=r(151),n=r(226),a=i.TypeError;t.exports=function(t){if(n(t))throw a("The method doesn't accept regular expressions");return t}},function(t,e,r){var i=r(155)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[i]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,r){var i=r(151),n=r(152),a=r(154),s=r(166),o=i.Object,u=n("".split);t.exports=a((function(){return!o("z").propertyIsEnumerable(0)}))?function(t){return"String"==s(t)?u(t,""):o(t)}:o},function(t,e,r){var i=r(234),n=r(208);t.exports=function(t){var e=i(t,"string");return n(e)?e:e+""}},function(t,e,r){var i=r(151),n=r(164),a=r(153),s=r(176),o=r(209),u=i.Object;t.exports=o?function(t){return"symbol"==typeof t}:function(t){var e=n("Symbol");return a(e)&&s(e.prototype,u(t))}},function(t,e,r){var i=r(210);t.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var i=r(189),n=r(154);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},function(t,e,r){var i=r(152),n=0,a=Math.random(),s=i(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+s(++n+a,36)}},function(t,e,r){var i=r(163),n=r(154),a=r(180);t.exports=!i&&!n((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var i=r(152),n=r(160),a=r(174),s=r(214).indexOf,o=r(194),u=i([].push);t.exports=function(t,e){var r,i=a(t),h=0,c=[];for(r in i)!n(o,r)&&n(i,r)&&u(c,r);for(;e.length>h;)n(i,r=e[h++])&&(~s(c,r)||u(c,r));return c}},function(t,e,r){var i=r(174),n=r(240),a=r(195),s=function(t){return function(e,r,s){var o,u=i(e),h=a(u),c=n(s,h);if(t&&r!=r){for(;h>c;)if((o=u[c++])!=o)return!0}else for(;h>c;c++)if((t||c in u)&&u[c]===r)return t||c||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},function(t,e,r){var i=r(154),n=r(153),a=/#|\.prototype\./,s=function(t,e){var r=u[o(t)];return r==c||r!=h&&(n(e)?i(e):!!e)},o=s.normalize=function(t){return String(t).replace(a,".").toLowerCase()},u=s.data={},h=s.NATIVE="N",c=s.POLYFILL="P";t.exports=s},function(t,e,r){var i=r(152),n=r(156),a=r(244);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=i(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),e=r instanceof Array}catch(t){}return function(r,i){return n(r),a(i),e?t(r,i):r.__proto__=i,r}}():void 0)},function(t,e,r){var i=r(199),n=r(167),a=r(175),s=r(155)("iterator");t.exports=function(t){if(null!=t)return n(t,s)||n(t,"@@iterator")||a[i(t)]}},function(t,e,r){var i=r(156),n=r(253),a=r(155)("species");t.exports=function(t,e){var r,s=i(t).constructor;return void 0===s||null==(r=i(s)[a])?e:n(r)}},function(t,e,r){var i,n,a,s,o=r(151),u=r(200),h=r(198),c=r(153),l=r(160),f=r(154),g=r(220),p=r(221),d=r(180),v=r(222),y=r(185),m=o.setImmediate,x=o.clearImmediate,b=o.process,w=o.Dispatch,S=o.Function,T=o.MessageChannel,A=o.String,O=0,P={};try{i=o.location}catch(t){}var E=function(t){if(l(P,t)){var e=P[t];delete P[t],e()}},C=function(t){return function(){E(t)}},M=function(t){E(t.data)},N=function(t){o.postMessage(A(t),i.protocol+"//"+i.host)};m&&x||(m=function(t){var e=p(arguments,1);return P[++O]=function(){u(c(t)?t:S(t),void 0,e)},n(O),O},x=function(t){delete P[t]},y?n=function(t){b.nextTick(C(t))}:w&&w.now?n=function(t){w.now(C(t))}:T&&!v?(s=(a=new T).port2,a.port1.onmessage=M,n=h(s.postMessage,s)):o.addEventListener&&c(o.postMessage)&&!o.importScripts&&i&&"file:"!==i.protocol&&!f(N)?(n=N,o.addEventListener("message",M,!1)):n="onreadystatechange"in d("script")?function(t){g.appendChild(d("script")).onreadystatechange=function(){g.removeChild(this),E(t)}}:function(t){setTimeout(C(t),0)}),t.exports={set:m,clear:x}},function(t,e,r){var i=r(164);t.exports=i("document","documentElement")},function(t,e,r){var i=r(152);t.exports=i([].slice)},function(t,e,r){var i=r(177);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(i)},function(t,e,r){"use strict";var i=r(168),n=function(t){var e,r;this.promise=new t((function(t,i){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=i})),this.resolve=i(e),this.reject=i(r)};t.exports.f=function(t){return new n(t)}},function(t,e,r){"use strict";var i=r(156);t.exports=function(){var t=i(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var i=r(154),n=r(151).RegExp;e.UNSUPPORTED_Y=i((function(){var t=n("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),e.BROKEN_CARET=i((function(){var t=n("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},function(t,e,r){var i=r(162),n=r(166),a=r(155)("match");t.exports=function(t){var e;return i(t)&&(void 0!==(e=t[a])?!!e:"RegExp"==n(t))}},function(t,e,r){"use strict";var i=r(174),n=r(273),a=r(175),s=r(182),o=r(274),u=s.set,h=s.getterFor("Array Iterator");t.exports=o(Array,"Array",(function(t,e){u(this,{type:"Array Iterator",target:i(t),index:0,kind:e})}),(function(){var t=h(this),e=t.target,r=t.kind,i=t.index++;return!e||i>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:i,done:!1}:"values"==r?{value:e[i],done:!1}:{value:[i,e[i]],done:!1}}),"values"),a.Arguments=a.Array,n("keys"),n("values"),n("entries")},function(t,e,r){"use strict";var i,n,a,s=r(154),o=r(153),u=r(187),h=r(229),c=r(165),l=r(155),f=r(169),g=l("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(n=h(h(a)))!==Object.prototype&&(i=n):p=!0),null==i||s((function(){var t={};return i[g].call(t)!==t}))?i={}:f&&(i=u(i)),o(i[g])||c(i,g,(function(){return this})),t.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:p}},function(t,e,r){var i=r(151),n=r(160),a=r(153),s=r(179),o=r(193),u=r(276),h=o("IE_PROTO"),c=i.Object,l=c.prototype;t.exports=u?c.getPrototypeOf:function(t){var e=s(t);if(n(e,h))return e[h];var r=e.constructor;return a(r)&&e instanceof r?r.prototype:e instanceof c?l:null}},function(t,e,r){"use strict";var i=r(154);t.exports=function(t,e){var r=[][t];return!!r&&i((function(){r.call(null,e||function(){throw 1},1)}))}},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e,r){"use strict";var i,n,a,s,o=r(158),u=r(169),h=r(151),c=r(164),l=r(157),f=r(242),g=r(165),p=r(243),d=r(216),v=r(197),y=r(245),m=r(168),x=r(153),b=r(162),w=r(246),S=r(181),T=r(247),A=r(252),O=r(218),P=r(219).set,E=r(255),C=r(258),M=r(259),N=r(223),_=r(260),V=r(182),R=r(215),k=r(155),I=r(261),L=r(185),D=r(189),B=k("species"),j=V.get,z=V.set,F=V.getterFor("Promise"),U=f&&f.prototype,H=f,X=U,Y=h.TypeError,q=h.document,W=h.process,G=N.f,Q=G,$=!!(q&&q.createEvent&&h.dispatchEvent),Z=x(h.PromiseRejectionEvent),K=!1,J=R("Promise",(function(){var t=S(H),e=t!==String(H);if(!e&&66===D)return!0;if(u&&!X.finally)return!0;if(D>=51&&/native code/.test(t))return!1;var r=new H((function(t){t(1)})),i=function(t){t((function(){}),(function(){}))};return(r.constructor={})[B]=i,!(K=r.then((function(){}))instanceof i)||!e&&I&&!Z})),tt=J||!A((function(t){H.all(t).catch((function(){}))})),et=function(t){var e;return!(!b(t)||!x(e=t.then))&&e},rt=function(t,e){if(!t.notified){t.notified=!0;var r=t.reactions;E((function(){for(var i=t.value,n=1==t.state,a=0;r.length>a;){var s,o,u,h=r[a++],c=n?h.ok:h.fail,f=h.resolve,g=h.reject,p=h.domain;try{c?(n||(2===t.rejection&&st(t),t.rejection=1),!0===c?s=i:(p&&p.enter(),s=c(i),p&&(p.exit(),u=!0)),s===h.promise?g(Y("Promise-chain cycle")):(o=et(s))?l(o,s,f,g):f(s)):g(i)}catch(t){p&&!u&&p.exit(),g(t)}}t.reactions=[],t.notified=!1,e&&!t.rejection&&nt(t)}))}},it=function(t,e,r){var i,n;$?((i=q.createEvent("Event")).promise=e,i.reason=r,i.initEvent(t,!1,!0),h.dispatchEvent(i)):i={promise:e,reason:r},!Z&&(n=h["on"+t])?n(i):"unhandledrejection"===t&&M("Unhandled promise rejection",r)},nt=function(t){l(P,h,(function(){var e,r=t.facade,i=t.value;if(at(t)&&(e=_((function(){L?W.emit("unhandledRejection",i,r):it("unhandledrejection",r,i)})),t.rejection=L||at(t)?2:1,e.error))throw e.value}))},at=function(t){return 1!==t.rejection&&!t.parent},st=function(t){l(P,h,(function(){var e=t.facade;L?W.emit("rejectionHandled",e):it("rejectionhandled",e,t.value)}))},ot=function(t,e,r){return function(i){t(e,i,r)}},ut=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,rt(t,!0))},ht=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var i=et(e);i?E((function(){var r={done:!1};try{l(i,e,ot(ht,r,t),ot(ut,r,t))}catch(e){ut(r,e,t)}})):(t.value=e,t.state=1,rt(t,!1))}catch(e){ut({done:!1},e,t)}}};if(J&&(X=(H=function(t){w(this,X),m(t),l(i,this);var e=j(this);try{t(ot(ht,e),ot(ut,e))}catch(t){ut(e,t)}}).prototype,(i=function(t){z(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(X,{then:function(t,e){var r=F(this),i=r.reactions,n=G(O(this,H));return n.ok=!x(t)||t,n.fail=x(e)&&e,n.domain=L?W.domain:void 0,r.parent=!0,i[i.length]=n,0!=r.state&&rt(r,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),n=function(){var t=new i,e=j(t);this.promise=t,this.resolve=ot(ht,e),this.reject=ot(ut,e)},N.f=G=function(t){return t===H||t===a?new n(t):Q(t)},!u&&x(f)&&U!==Object.prototype)){s=U.then,K||(g(U,"then",(function(t,e){var r=this;return new H((function(t,e){l(s,r,t,e)})).then(t,e)}),{unsafe:!0}),g(U,"catch",X.catch,{unsafe:!0}));try{delete U.constructor}catch(t){}d&&d(U,X)}o({global:!0,wrap:!0,forced:J},{Promise:H}),v(H,"Promise",!1,!0),y("Promise"),a=c("Promise"),o({target:"Promise",stat:!0,forced:J},{reject:function(t){var e=G(this);return l(e.reject,void 0,t),e.promise}}),o({target:"Promise",stat:!0,forced:u||J},{resolve:function(t){return C(u&&this===a?H:this,t)}}),o({target:"Promise",stat:!0,forced:tt},{all:function(t){var e=this,r=G(e),i=r.resolve,n=r.reject,a=_((function(){var r=m(e.resolve),a=[],s=0,o=1;T(t,(function(t){var u=s++,h=!1;o++,l(r,e,t).then((function(t){h||(h=!0,a[u]=t,--o||i(a))}),n)})),--o||i(a)}));return a.error&&n(a.value),r.promise},race:function(t){var e=this,r=G(e),i=r.reject,n=_((function(){var n=m(e.resolve);T(t,(function(t){l(n,e,t).then(r.resolve,i)}))}));return n.error&&i(n.value),r.promise}})},function(t,e,r){"use strict";var i={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,a=n&&!i.call({1:2},1);e.f=a?function(t){var e=n(this,t);return!!e&&e.enumerable}:i},function(t,e,r){var i=r(151),n=r(157),a=r(162),s=r(208),o=r(167),u=r(235),h=r(155),c=i.TypeError,l=h("toPrimitive");t.exports=function(t,e){if(!a(t)||s(t))return t;var r,i=o(t,l);if(i){if(void 0===e&&(e="default"),r=n(i,t,e),!a(r)||s(r))return r;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),u(t,e)}},function(t,e,r){var i=r(151),n=r(157),a=r(153),s=r(162),o=i.TypeError;t.exports=function(t,e){var r,i;if("string"===e&&a(r=t.toString)&&!s(i=n(r,t)))return i;if(a(r=t.valueOf)&&!s(i=n(r,t)))return i;if("string"!==e&&a(r=t.toString)&&!s(i=n(r,t)))return i;throw o("Can't convert object to primitive value")}},function(t,e,r){var i=r(151),n=r(153),a=r(181),s=i.WeakMap;t.exports=n(s)&&/native code/.test(a(s))},function(t,e,r){var i=r(160),n=r(238),a=r(173),s=r(171);t.exports=function(t,e){for(var r=n(e),o=s.f,u=a.f,h=0;h<r.length;h++){var c=r[h];i(t,c)||o(t,c,u(e,c))}}},function(t,e,r){var i=r(164),n=r(152),a=r(239),s=r(241),o=r(156),u=n([].concat);t.exports=i("Reflect","ownKeys")||function(t){var e=a.f(o(t)),r=s.f;return r?u(e,r(t)):e}},function(t,e,r){var i=r(213),n=r(196).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,n)}},function(t,e,r){var i=r(184),n=Math.max,a=Math.min;t.exports=function(t,e){var r=i(t);return r<0?n(r+e,0):a(r,e)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var i=r(151);t.exports=i.Promise},function(t,e,r){var i=r(165);t.exports=function(t,e,r){for(var n in e)i(t,n,e[n],r);return t}},function(t,e,r){var i=r(151),n=r(153),a=i.String,s=i.TypeError;t.exports=function(t){if("object"==typeof t||n(t))return t;throw s("Can't set "+a(t)+" as a prototype")}},function(t,e,r){"use strict";var i=r(164),n=r(171),a=r(155),s=r(163),o=a("species");t.exports=function(t){var e=i(t),r=n.f;s&&e&&!e[o]&&r(e,o,{configurable:!0,get:function(){return this}})}},function(t,e,r){var i=r(151),n=r(176),a=i.TypeError;t.exports=function(t,e){if(n(e,t))return t;throw a("Incorrect invocation")}},function(t,e,r){var i=r(151),n=r(198),a=r(157),s=r(156),o=r(178),u=r(248),h=r(195),c=r(176),l=r(249),f=r(217),g=r(251),p=i.TypeError,d=function(t,e){this.stopped=t,this.result=e},v=d.prototype;t.exports=function(t,e,r){var i,y,m,x,b,w,S,T=r&&r.that,A=!(!r||!r.AS_ENTRIES),O=!(!r||!r.IS_ITERATOR),P=!(!r||!r.INTERRUPTED),E=n(e,T),C=function(t){return i&&g(i,"normal",t),new d(!0,t)},M=function(t){return A?(s(t),P?E(t[0],t[1],C):E(t[0],t[1])):P?E(t,C):E(t)};if(O)i=t;else{if(!(y=f(t)))throw p(o(t)+" is not iterable");if(u(y)){for(m=0,x=h(t);x>m;m++)if((b=M(t[m]))&&c(v,b))return b;return new d(!1)}i=l(t,y)}for(w=i.next;!(S=a(w,i)).done;){try{b=M(S.value)}catch(t){g(i,"throw",t)}if("object"==typeof b&&b&&c(v,b))return b}return new d(!1)}},function(t,e,r){var i=r(155),n=r(175),a=i("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||s[a]===t)}},function(t,e,r){var i=r(151),n=r(157),a=r(168),s=r(156),o=r(178),u=r(217),h=i.TypeError;t.exports=function(t,e){var r=arguments.length<2?u(t):e;if(a(r))return s(n(r,t));throw h(o(t)+" is not iterable")}},function(t,e,r){var i={};i[r(155)("toStringTag")]="z",t.exports="[object z]"===String(i)},function(t,e,r){var i=r(157),n=r(156),a=r(167);t.exports=function(t,e,r){var s,o;n(t);try{if(!(s=a(t,"return"))){if("throw"===e)throw r;return r}s=i(s,t)}catch(t){o=!0,s=t}if("throw"===e)throw r;if(o)throw s;return n(s),r}},function(t,e,r){var i=r(155)("iterator"),n=!1;try{var a=0,s={next:function(){return{done:!!a++}},return:function(){n=!0}};s[i]=function(){return this},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!n)return!1;var r=!1;try{var a={};a[i]=function(){return{next:function(){return{done:r=!0}}}},t(a)}catch(t){}return r}},function(t,e,r){var i=r(151),n=r(254),a=r(178),s=i.TypeError;t.exports=function(t){if(n(t))return t;throw s(a(t)+" is not a constructor")}},function(t,e,r){var i=r(152),n=r(154),a=r(153),s=r(199),o=r(164),u=r(181),h=function(){},c=[],l=o("Reflect","construct"),f=/^\s*(?:class|function)\b/,g=i(f.exec),p=!f.exec(h),d=function(t){if(!a(t))return!1;try{return l(h,c,t),!0}catch(t){return!1}};t.exports=!l||n((function(){var t;return d(d.call)||!d(Object)||!d((function(){t=!0}))||t}))?function(t){if(!a(t))return!1;switch(s(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!g(f,u(t))}:d},function(t,e,r){var i,n,a,s,o,u,h,c,l=r(151),f=r(198),g=r(173).f,p=r(219).set,d=r(222),v=r(256),y=r(257),m=r(185),x=l.MutationObserver||l.WebKitMutationObserver,b=l.document,w=l.process,S=l.Promise,T=g(l,"queueMicrotask"),A=T&&T.value;A||(i=function(){var t,e;for(m&&(t=w.domain)&&t.exit();n;){e=n.fn,n=n.next;try{e()}catch(t){throw n?s():a=void 0,t}}a=void 0,t&&t.enter()},d||m||y||!x||!b?!v&&S&&S.resolve?((h=S.resolve(void 0)).constructor=S,c=f(h.then,h),s=function(){c(i)}):m?s=function(){w.nextTick(i)}:(p=f(p,l),s=function(){p(i)}):(o=!0,u=b.createTextNode(""),new x(i).observe(u,{characterData:!0}),s=function(){u.data=o=!o})),t.exports=A||function(t){var e={fn:t,next:void 0};a&&(a.next=e),n||(n=e,s()),a=e}},function(t,e,r){var i=r(177),n=r(151);t.exports=/ipad|iphone|ipod/i.test(i)&&void 0!==n.Pebble},function(t,e,r){var i=r(177);t.exports=/web0s(?!.*chrome)/i.test(i)},function(t,e,r){var i=r(156),n=r(162),a=r(223);t.exports=function(t,e){if(i(t),n(e)&&e.constructor===t)return e;var r=a.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var i=r(151);t.exports=function(t,e){var r=i.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e){t.exports="object"==typeof window},function(t,e,r){(function(e){function r(t,r,i,n,a,s,o){try{var u=t[s](o),h=u.value}catch(t){return void i(t)}u.done?r(h):e.resolve(h).then(n,a)}t.exports=function(t){return function(){var i=this,n=arguments;return new e((function(e,a){var s=t.apply(i,n);function o(t){r(s,e,a,o,u,"next",t)}function u(t){r(s,e,a,o,u,"throw",t)}o(void 0)}))}},t.exports.default=t.exports,t.exports.__esModule=!0}).call(this,r(5))},function(t,e,r){"use strict";var i=r(157),n=r(201),a=r(156),s=r(172),o=r(161),u=r(159),h=r(167),c=r(202),l=r(203);n("match",(function(t,e,r){return[function(e){var r=u(this),n=null==e?void 0:h(e,t);return n?i(n,e,r):new RegExp(e)[t](o(r))},function(t){var i=a(this),n=o(t),u=r(e,i,n);if(u.done)return u.value;if(!i.global)return l(i,n);var h=i.unicode;i.lastIndex=0;for(var f,g=[],p=0;null!==(f=l(i,n));){var d=o(f[0]);g[p]=d,""===d&&(i.lastIndex=c(n,s(i.lastIndex),h)),p++}return 0===p?null:g}]}))},function(t,e,r){"use strict";var i=r(158),n=r(186);i({target:"RegExp",proto:!0,forced:/./.exec!==n},{exec:n})},function(t,e,r){var i=r(163),n=r(171),a=r(156),s=r(174),o=r(266);t.exports=i?Object.defineProperties:function(t,e){a(t);for(var r,i=s(e),u=o(e),h=u.length,c=0;h>c;)n.f(t,r=u[c++],i[r]);return t}},function(t,e,r){var i=r(213),n=r(196);t.exports=Object.keys||function(t){return i(t,n)}},function(t,e,r){var i=r(154),n=r(151).RegExp;t.exports=i((function(){var t=n(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},function(t,e,r){var i=r(154),n=r(151).RegExp;t.exports=i((function(){var t=n("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},function(t,e,r){var i=r(152),n=r(184),a=r(161),s=r(159),o=i("".charAt),u=i("".charCodeAt),h=i("".slice),c=function(t){return function(e,r){var i,c,l=a(s(e)),f=n(r),g=l.length;return f<0||f>=g?t?"":void 0:(i=u(l,f))<55296||i>56319||f+1===g||(c=u(l,f+1))<56320||c>57343?t?o(l,f):i:t?h(l,f,f+2):c-56320+(i-55296<<10)+65536}};t.exports={codeAt:c(!1),charAt:c(!0)}},function(t,e,r){"use strict";var i=r(200),n=r(157),a=r(152),s=r(201),o=r(154),u=r(156),h=r(153),c=r(184),l=r(172),f=r(161),g=r(159),p=r(202),d=r(167),v=r(271),y=r(203),m=r(155)("replace"),x=Math.max,b=Math.min,w=a([].concat),S=a([].push),T=a("".indexOf),A=a("".slice),O="$0"==="a".replace(/./,"$0"),P=!!/./[m]&&""===/./[m]("a","$0");s("replace",(function(t,e,r){var a=P?"$":"$0";return[function(t,r){var i=g(this),a=null==t?void 0:d(t,m);return a?n(a,t,i,r):n(e,f(i),t,r)},function(t,n){var s=u(this),o=f(t);if("string"==typeof n&&-1===T(n,a)&&-1===T(n,"$<")){var g=r(e,s,o,n);if(g.done)return g.value}var d=h(n);d||(n=f(n));var m=s.global;if(m){var O=s.unicode;s.lastIndex=0}for(var P=[];;){var E=y(s,o);if(null===E)break;if(S(P,E),!m)break;""===f(E[0])&&(s.lastIndex=p(o,l(s.lastIndex),O))}for(var C,M="",N=0,_=0;_<P.length;_++){for(var V=f((E=P[_])[0]),R=x(b(c(E.index),o.length),0),k=[],I=1;I<E.length;I++)S(k,void 0===(C=E[I])?C:String(C));var L=E.groups;if(d){var D=w([V],k,R,o);void 0!==L&&S(D,L);var B=f(i(n,void 0,D))}else B=v(V,o,R,k,L,n);R>=N&&(M+=A(o,N,R)+B,N=R+V.length)}return M+A(o,N)}]}),!!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!O||P)},function(t,e,r){var i=r(152),n=r(179),a=Math.floor,s=i("".charAt),o=i("".replace),u=i("".slice),h=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,i,l,f){var g=r+t.length,p=i.length,d=c;return void 0!==l&&(l=n(l),d=h),o(f,d,(function(n,o){var h;switch(s(o,0)){case"$":return"$";case"&":return t;case"`":return u(e,0,r);case"'":return u(e,g);case"<":h=l[u(o,1,-1)];break;default:var c=+o;if(0===c)return n;if(c>p){var f=a(c/10);return 0===f?n:f<=p?void 0===i[f-1]?s(o,1):i[f-1]+s(o,1):n}h=i[c-1]}return void 0===h?"":h}))}},function(t,e,r){"use strict";var i,n=r(158),a=r(152),s=r(173).f,o=r(172),u=r(161),h=r(204),c=r(159),l=r(205),f=r(169),g=a("".startsWith),p=a("".slice),d=Math.min,v=l("startsWith");n({target:"String",proto:!0,forced:!!(f||v||(i=s(String.prototype,"startsWith"),!i||i.writable))&&!v},{startsWith:function(t){var e=u(c(this));h(t);var r=o(d(arguments.length>1?arguments[1]:void 0,e.length)),i=u(t);return g?g(e,i,r):p(e,r,r+i.length)===i}})},function(t,e,r){var i=r(155),n=r(187),a=r(171),s=i("unscopables"),o=Array.prototype;null==o[s]&&a.f(o,s,{configurable:!0,value:n(null)}),t.exports=function(t){o[s][t]=!0}},function(t,e,r){"use strict";var i=r(158),n=r(157),a=r(169),s=r(183),o=r(153),u=r(275),h=r(229),c=r(216),l=r(197),f=r(170),g=r(165),p=r(155),d=r(175),v=r(228),y=s.PROPER,m=s.CONFIGURABLE,x=v.IteratorPrototype,b=v.BUGGY_SAFARI_ITERATORS,w=p("iterator"),S=function(){return this};t.exports=function(t,e,r,s,p,v,T){u(r,e,s);var A,O,P,E=function(t){if(t===p&&V)return V;if(!b&&t in N)return N[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},C=e+" Iterator",M=!1,N=t.prototype,_=N[w]||N["@@iterator"]||p&&N[p],V=!b&&_||E(p),R="Array"==e&&N.entries||_;if(R&&(A=h(R.call(new t)))!==Object.prototype&&A.next&&(a||h(A)===x||(c?c(A,x):o(A[w])||g(A,w,S)),l(A,C,!0,!0),a&&(d[C]=S)),y&&"values"==p&&_&&"values"!==_.name&&(!a&&m?f(N,"name","values"):(M=!0,V=function(){return n(_,this)})),p)if(O={values:E("values"),keys:v?V:E("keys"),entries:E("entries")},T)for(P in O)(b||M||!(P in N))&&g(N,P,O[P]);else i({target:e,proto:!0,forced:b||M},O);return a&&!T||N[w]===V||g(N,w,V,{name:p}),d[e]=V,O}},function(t,e,r){"use strict";var i=r(228).IteratorPrototype,n=r(187),a=r(188),s=r(197),o=r(175),u=function(){return this};t.exports=function(t,e,r){var h=e+" Iterator";return t.prototype=n(i,{next:a(1,r)}),s(t,h,!1,!0),o[h]=u,t}},function(t,e,r){var i=r(154);t.exports=!i((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var i=r(151),n=r(278),a=r(279),s=r(227),o=r(170),u=r(155),h=u("iterator"),c=u("toStringTag"),l=s.values,f=function(t,e){if(t){if(t[h]!==l)try{o(t,h,l)}catch(e){t[h]=l}if(t[c]||o(t,c,e),n[e])for(var r in s)if(t[r]!==s[r])try{o(t,r,s[r])}catch(e){t[r]=s[r]}}};for(var g in n)f(i[g]&&i[g].prototype,g);f(a,"DOMTokenList")},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var i=r(180)("span").classList,n=i&&i.constructor&&i.constructor.prototype;t.exports=n===Object.prototype?void 0:n},function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){"use strict";var i=r(158),n=r(282).left,a=r(230),s=r(189),o=r(185);i({target:"Array",proto:!0,forced:!a("reduce")||!o&&s>79&&s<83},{reduce:function(t){var e=arguments.length;return n(this,t,e,e>1?arguments[1]:void 0)}})},function(t,e,r){var i=r(151),n=r(168),a=r(179),s=r(206),o=r(195),u=i.TypeError,h=function(t){return function(e,r,i,h){n(r);var c=a(e),l=s(c),f=o(c),g=t?f-1:0,p=t?-1:1;if(i<2)for(;;){if(g in l){h=l[g],g+=p;break}if(g+=p,t?g<0:f<=g)throw u("Reduce of empty array with no initial value")}for(;t?g>=0:f>g;g+=p)g in l&&(h=r(h,l[g],g,c));return h}};t.exports={left:h(!1),right:h(!0)}},function(t,e,r){"use strict";var i,n=r(158),a=r(152),s=r(173).f,o=r(172),u=r(161),h=r(204),c=r(159),l=r(205),f=r(169),g=a("".endsWith),p=a("".slice),d=Math.min,v=l("endsWith");n({target:"String",proto:!0,forced:!!(f||v||(i=s(String.prototype,"endsWith"),!i||i.writable))&&!v},{endsWith:function(t){var e=u(c(this));h(t);var r=arguments.length>1?arguments[1]:void 0,i=e.length,n=void 0===r?i:d(o(r),i),a=u(t);return g?g(e,a,n):p(e,n-a.length,n)===a}})},function(t,e,r){"use strict";var i=r(200),n=r(157),a=r(152),s=r(201),o=r(226),u=r(156),h=r(159),c=r(218),l=r(202),f=r(172),g=r(161),p=r(167),d=r(221),v=r(203),y=r(186),m=r(225),x=r(154),b=m.UNSUPPORTED_Y,w=Math.min,S=[].push,T=a(/./.exec),A=a(S),O=a("".slice);s("split",(function(t,e,r){var a;return a="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var a=g(h(this)),s=void 0===r?4294967295:r>>>0;if(0===s)return[];if(void 0===t)return[a];if(!o(t))return n(e,a,t,s);for(var u,c,l,f=[],p=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),v=0,m=new RegExp(t.source,p+"g");(u=n(y,m,a))&&!((c=m.lastIndex)>v&&(A(f,O(a,v,u.index)),u.length>1&&u.index<a.length&&i(S,f,d(u,1)),l=u[0].length,v=c,f.length>=s));)m.lastIndex===u.index&&m.lastIndex++;return v===a.length?!l&&T(m,"")||A(f,""):A(f,O(a,v)),f.length>s?d(f,0,s):f}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:n(e,this,t,r)}:e,[function(e,r){var i=h(this),s=null==e?void 0:p(e,t);return s?n(s,e,i,r):n(a,g(i),e,r)},function(t,i){var n=u(this),s=g(t),o=r(a,n,s,i,a!==e);if(o.done)return o.value;var h=c(n,RegExp),p=n.unicode,d=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(b?"g":"y"),y=new h(b?"^(?:"+n.source+")":n,d),m=void 0===i?4294967295:i>>>0;if(0===m)return[];if(0===s.length)return null===v(y,s)?[s]:[];for(var x=0,S=0,T=[];S<s.length;){y.lastIndex=b?0:S;var P,E=v(y,b?O(s,S):s);if(null===E||(P=w(f(y.lastIndex+(b?S:0)),s.length))===x)S=l(s,S,p);else{if(A(T,O(s,x,S)),T.length===m)return T;for(var C=1;C<=E.length-1;C++)if(A(T,E[C]),T.length===m)return T;S=x=P}}return A(T,O(s,x)),T}]}),!!x((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),b)},function(t,e,r){(function(e){for(var i=r(286),n="undefined"==typeof window?e:window,a=["moz","webkit"],s="AnimationFrame",o=n["request"+s],u=n["cancel"+s]||n["cancelRequest"+s],h=0;!o&&h<a.length;h++)o=n[a[h]+"Request"+s],u=n[a[h]+"Cancel"+s]||n[a[h]+"CancelRequest"+s];if(!o||!u){var c=0,l=0,f=[];o=function(t){if(0===f.length){var e=i(),r=Math.max(0,1e3/60-(e-c));c=r+e,setTimeout((function(){var t=f.slice(0);f.length=0;for(var e=0;e<t.length;e++)if(!t[e].cancelled)try{t[e].callback(c)}catch(t){setTimeout((function(){throw t}),0)}}),Math.round(r))}return f.push({handle:++l,callback:t,cancelled:!1}),l},u=function(t){for(var e=0;e<f.length;e++)f[e].handle===t&&(f[e].cancelled=!0)}}t.exports=function(t){return o.call(n,t)},t.exports.cancel=function(){u.apply(n,arguments)},t.exports.polyfill=function(t){t||(t=n),t.requestAnimationFrame=o,t.cancelAnimationFrame=u}}).call(this,r(8))},function(t,e,r){(function(e){(function(){var r,i,n,a,s,o;"undefined"!=typeof performance&&null!==performance&&performance.now?t.exports=function(){return performance.now()}:null!=e&&e.hrtime?(t.exports=function(){return(r()-s)/1e6},i=e.hrtime,a=(r=function(){var t;return 1e9*(t=i())[0]+t[1]})(),o=1e9*e.uptime(),s=a-o):Date.now?(t.exports=function(){return Date.now()-n},n=Date.now()):(t.exports=function(){return(new Date).getTime()-n},n=(new Date).getTime())}).call(this)}).call(this,r(18))},function(t,e,r){"use strict";var i=r(158),n=r(288).trim;i({target:"String",proto:!0,forced:r(289)("trim")},{trim:function(){return n(this)}})},function(t,e,r){var i=r(152),n=r(159),a=r(161),s=r(231),o=i("".replace),u="["+s+"]",h=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),l=function(t){return function(e){var r=a(n(e));return 1&t&&(r=o(r,h,"")),2&t&&(r=o(r,c,"")),r}};t.exports={start:l(1),end:l(2),trim:l(3)}},function(t,e,r){var i=r(183).PROPER,n=r(154),a=r(231);t.exports=function(t){return n((function(){return!!a[t]()||"​᠎"!=="​᠎"[t]()||i&&a[t].name!==t}))}},function(t,e){t.exports=function(t){this.ok=!1,this.alpha=1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t=(t=t.replace(/ /g,"")).toLowerCase();var e={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};t=e[t]||t;for(var r=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3]),parseFloat(t[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],i=0;i<r.length;i++){var n=r[i].re,a=r[i].process,s=n.exec(t);if(s){var o=a(s);this.r=o[0],this.g=o[1],this.b=o[2],o.length>3&&(this.alpha=o[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),r=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==r.length&&(r="0"+r),"#"+t+e+r},this.getHelpXML=function(){for(var t=new Array,i=0;i<r.length;i++)for(var n=r[i].example,a=0;a<n.length;a++)t[t.length]=n[a];for(var s in e)t[t.length]=s;var o=document.createElement("ul");o.setAttribute("id","rgbcolor-examples");for(i=0;i<t.length;i++)try{var u=document.createElement("li"),h=new RGBColor(t[i]),c=document.createElement("div");c.style.cssText="margin: 3px; border: 1px solid black; background:"+h.toHex()+"; color:"+h.toHex(),c.appendChild(document.createTextNode("test"));var l=document.createTextNode(" "+t[i]+" -> "+h.toRGB()+" -> "+h.toHex());u.appendChild(c),u.appendChild(l),o.appendChild(u)}catch(t){}return o}}},function(t,e,r){"use strict";var i=r(158),n=r(152),a=r(204),s=r(159),o=r(161),u=r(205),h=n("".indexOf);i({target:"String",proto:!0,forced:!u("includes")},{includes:function(t){return!!~h(o(s(this)),o(a(t)),arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var i=r(158),n=r(152),a=r(214).indexOf,s=r(230),o=n([].indexOf),u=!!o&&1/o([1],1,-0)<0,h=s("indexOf");i({target:"Array",proto:!0,forced:u||!h},{indexOf:function(t){var e=arguments.length>1?arguments[1]:void 0;return u?o(this,t,e)||0:a(this,t,e)}})},function(t,e,r){"use strict";var i=r(158),n=r(152),a=r(294),s=n([].reverse),o=[1,2];i({target:"Array",proto:!0,forced:String(o)===String(o.reverse())},{reverse:function(){return a(this)&&(this.length=this.length),s(this)}})},function(t,e,r){var i=r(166);t.exports=Array.isArray||function(t){return"Array"==i(t)}},function(t,e,r){"use strict";r.d(e,"a",(function(){return w}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])})(t,e)};function n(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function a(t,e){var r=t[0],i=t[1];return[r*Math.cos(e)-i*Math.sin(e),r*Math.sin(e)+i*Math.cos(e)]}function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var r=0;r<t.length;r++)if("number"!=typeof t[r])throw new Error("assertNumbers arguments["+r+"] is not a number. "+typeof t[r]+" == typeof "+t[r]);return!0}var o=Math.PI;function u(t,e,r){t.lArcFlag=0===t.lArcFlag?0:1,t.sweepFlag=0===t.sweepFlag?0:1;var i=t.rX,n=t.rY,s=t.x,u=t.y;i=Math.abs(t.rX),n=Math.abs(t.rY);var h=a([(e-s)/2,(r-u)/2],-t.xRot/180*o),c=h[0],l=h[1],f=Math.pow(c,2)/Math.pow(i,2)+Math.pow(l,2)/Math.pow(n,2);1<f&&(i*=Math.sqrt(f),n*=Math.sqrt(f)),t.rX=i,t.rY=n;var g=Math.pow(i,2)*Math.pow(l,2)+Math.pow(n,2)*Math.pow(c,2),p=(t.lArcFlag!==t.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(i,2)*Math.pow(n,2)-g)/g)),d=i*l/n*p,v=-n*c/i*p,y=a([d,v],t.xRot/180*o);t.cX=y[0]+(e+s)/2,t.cY=y[1]+(r+u)/2,t.phi1=Math.atan2((l-v)/n,(c-d)/i),t.phi2=Math.atan2((-l-v)/n,(-c-d)/i),0===t.sweepFlag&&t.phi2>t.phi1&&(t.phi2-=2*o),1===t.sweepFlag&&t.phi2<t.phi1&&(t.phi2+=2*o),t.phi1*=180/o,t.phi2*=180/o}function h(t,e,r){s(t,e,r);var i=t*t+e*e-r*r;if(0>i)return[];if(0===i)return[[t*r/(t*t+e*e),e*r/(t*t+e*e)]];var n=Math.sqrt(i);return[[(t*r+e*n)/(t*t+e*e),(e*r-t*n)/(t*t+e*e)],[(t*r-e*n)/(t*t+e*e),(e*r+t*n)/(t*t+e*e)]]}var c,l=Math.PI/180;function f(t,e,r){return(1-r)*t+r*e}function g(t,e,r,i){return t+Math.cos(i/180*o)*e+Math.sin(i/180*o)*r}function p(t,e,r,i){var n=1e-6,a=e-t,s=r-e,o=3*a+3*(i-r)-6*s,u=6*(s-a),h=3*a;return Math.abs(o)<n?[-h/u]:function(t,e,r){void 0===r&&(r=1e-6);var i=t*t/4-e;if(i<-r)return[];if(i<=r)return[-t/2];var n=Math.sqrt(i);return[-t/2-n,-t/2+n]}(u/o,h/o,n)}function d(t,e,r,i,n){var a=1-n;return t*(a*a*a)+e*(3*a*a*n)+r*(3*a*n*n)+i*(n*n*n)}!function(t){function e(){return n((function(t,e,r){return t.relative&&(void 0!==t.x1&&(t.x1+=e),void 0!==t.y1&&(t.y1+=r),void 0!==t.x2&&(t.x2+=e),void 0!==t.y2&&(t.y2+=r),void 0!==t.x&&(t.x+=e),void 0!==t.y&&(t.y+=r),t.relative=!1),t}))}function r(){var t=NaN,e=NaN,r=NaN,i=NaN;return n((function(n,a,s){return n.type&w.SMOOTH_CURVE_TO&&(n.type=w.CURVE_TO,t=isNaN(t)?a:t,e=isNaN(e)?s:e,n.x1=n.relative?a-t:2*a-t,n.y1=n.relative?s-e:2*s-e),n.type&w.CURVE_TO?(t=n.relative?a+n.x2:n.x2,e=n.relative?s+n.y2:n.y2):(t=NaN,e=NaN),n.type&w.SMOOTH_QUAD_TO&&(n.type=w.QUAD_TO,r=isNaN(r)?a:r,i=isNaN(i)?s:i,n.x1=n.relative?a-r:2*a-r,n.y1=n.relative?s-i:2*s-i),n.type&w.QUAD_TO?(r=n.relative?a+n.x1:n.x1,i=n.relative?s+n.y1:n.y1):(r=NaN,i=NaN),n}))}function i(){var t=NaN,e=NaN;return n((function(r,i,n){if(r.type&w.SMOOTH_QUAD_TO&&(r.type=w.QUAD_TO,t=isNaN(t)?i:t,e=isNaN(e)?n:e,r.x1=r.relative?i-t:2*i-t,r.y1=r.relative?n-e:2*n-e),r.type&w.QUAD_TO){t=r.relative?i+r.x1:r.x1,e=r.relative?n+r.y1:r.y1;var a=r.x1,s=r.y1;r.type=w.CURVE_TO,r.x1=((r.relative?0:i)+2*a)/3,r.y1=((r.relative?0:n)+2*s)/3,r.x2=(r.x+2*a)/3,r.y2=(r.y+2*s)/3}else t=NaN,e=NaN;return r}))}function n(t){var e=0,r=0,i=NaN,n=NaN;return function(a){if(isNaN(i)&&!(a.type&w.MOVE_TO))throw new Error("path must start with moveto");var s=t(a,e,r,i,n);return a.type&w.CLOSE_PATH&&(e=i,r=n),void 0!==a.x&&(e=a.relative?e+a.x:a.x),void 0!==a.y&&(r=a.relative?r+a.y:a.y),a.type&w.MOVE_TO&&(i=e,n=r),s}}function o(t,e,r,i,a,o){return s(t,e,r,i,a,o),n((function(n,s,u,h){var c=n.x1,l=n.x2,f=n.relative&&!isNaN(h),g=void 0!==n.x?n.x:f?0:s,p=void 0!==n.y?n.y:f?0:u;function d(t){return t*t}n.type&w.HORIZ_LINE_TO&&0!==e&&(n.type=w.LINE_TO,n.y=n.relative?0:u),n.type&w.VERT_LINE_TO&&0!==r&&(n.type=w.LINE_TO,n.x=n.relative?0:s),void 0!==n.x&&(n.x=n.x*t+p*r+(f?0:a)),void 0!==n.y&&(n.y=g*e+n.y*i+(f?0:o)),void 0!==n.x1&&(n.x1=n.x1*t+n.y1*r+(f?0:a)),void 0!==n.y1&&(n.y1=c*e+n.y1*i+(f?0:o)),void 0!==n.x2&&(n.x2=n.x2*t+n.y2*r+(f?0:a)),void 0!==n.y2&&(n.y2=l*e+n.y2*i+(f?0:o));var v=t*i-e*r;if(void 0!==n.xRot&&(1!==t||0!==e||0!==r||1!==i))if(0===v)delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag,n.type=w.LINE_TO;else{var y=n.xRot*Math.PI/180,m=Math.sin(y),x=Math.cos(y),b=1/d(n.rX),S=1/d(n.rY),T=d(x)*b+d(m)*S,A=2*m*x*(b-S),O=d(m)*b+d(x)*S,P=T*i*i-A*e*i+O*e*e,E=A*(t*i+e*r)-2*(T*r*i+O*t*e),C=T*r*r-A*t*r+O*t*t,M=(Math.atan2(E,P-C)+Math.PI)%Math.PI/2,N=Math.sin(M),_=Math.cos(M);n.rX=Math.abs(v)/Math.sqrt(P*d(_)+E*N*_+C*d(N)),n.rY=Math.abs(v)/Math.sqrt(P*d(N)-E*N*_+C*d(_)),n.xRot=180*M/Math.PI}return void 0!==n.sweepFlag&&0>v&&(n.sweepFlag=+!n.sweepFlag),n}))}t.ROUND=function(t){function e(e){return Math.round(e*t)/t}return void 0===t&&(t=1e13),s(t),function(t){return void 0!==t.x1&&(t.x1=e(t.x1)),void 0!==t.y1&&(t.y1=e(t.y1)),void 0!==t.x2&&(t.x2=e(t.x2)),void 0!==t.y2&&(t.y2=e(t.y2)),void 0!==t.x&&(t.x=e(t.x)),void 0!==t.y&&(t.y=e(t.y)),void 0!==t.rX&&(t.rX=e(t.rX)),void 0!==t.rY&&(t.rY=e(t.rY)),t}},t.TO_ABS=e,t.TO_REL=function(){return n((function(t,e,r){return t.relative||(void 0!==t.x1&&(t.x1-=e),void 0!==t.y1&&(t.y1-=r),void 0!==t.x2&&(t.x2-=e),void 0!==t.y2&&(t.y2-=r),void 0!==t.x&&(t.x-=e),void 0!==t.y&&(t.y-=r),t.relative=!0),t}))},t.NORMALIZE_HVZ=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),n((function(i,n,a,s,o){if(isNaN(s)&&!(i.type&w.MOVE_TO))throw new Error("path must start with moveto");return e&&i.type&w.HORIZ_LINE_TO&&(i.type=w.LINE_TO,i.y=i.relative?0:a),r&&i.type&w.VERT_LINE_TO&&(i.type=w.LINE_TO,i.x=i.relative?0:n),t&&i.type&w.CLOSE_PATH&&(i.type=w.LINE_TO,i.x=i.relative?s-n:s,i.y=i.relative?o-a:o),i.type&w.ARC&&(0===i.rX||0===i.rY)&&(i.type=w.LINE_TO,delete i.rX,delete i.rY,delete i.xRot,delete i.lArcFlag,delete i.sweepFlag),i}))},t.NORMALIZE_ST=r,t.QT_TO_C=i,t.INFO=n,t.SANITIZE=function(t){void 0===t&&(t=0),s(t);var e=NaN,r=NaN,i=NaN,a=NaN;return n((function(n,s,o,u,h){var c=Math.abs,l=!1,f=0,g=0;if(n.type&w.SMOOTH_CURVE_TO&&(f=isNaN(e)?0:s-e,g=isNaN(r)?0:o-r),n.type&(w.CURVE_TO|w.SMOOTH_CURVE_TO)?(e=n.relative?s+n.x2:n.x2,r=n.relative?o+n.y2:n.y2):(e=NaN,r=NaN),n.type&w.SMOOTH_QUAD_TO?(i=isNaN(i)?s:2*s-i,a=isNaN(a)?o:2*o-a):n.type&w.QUAD_TO?(i=n.relative?s+n.x1:n.x1,a=n.relative?o+n.y1:n.y2):(i=NaN,a=NaN),n.type&w.LINE_COMMANDS||n.type&w.ARC&&(0===n.rX||0===n.rY||!n.lArcFlag)||n.type&w.CURVE_TO||n.type&w.SMOOTH_CURVE_TO||n.type&w.QUAD_TO||n.type&w.SMOOTH_QUAD_TO){var p=void 0===n.x?0:n.relative?n.x:n.x-s,d=void 0===n.y?0:n.relative?n.y:n.y-o;f=isNaN(i)?void 0===n.x1?f:n.relative?n.x:n.x1-s:i-s,g=isNaN(a)?void 0===n.y1?g:n.relative?n.y:n.y1-o:a-o;var v=void 0===n.x2?0:n.relative?n.x:n.x2-s,y=void 0===n.y2?0:n.relative?n.y:n.y2-o;c(p)<=t&&c(d)<=t&&c(f)<=t&&c(g)<=t&&c(v)<=t&&c(y)<=t&&(l=!0)}return n.type&w.CLOSE_PATH&&c(s-u)<=t&&c(o-h)<=t&&(l=!0),l?[]:n}))},t.MATRIX=o,t.ROTATE=function(t,e,r){void 0===e&&(e=0),void 0===r&&(r=0),s(t,e,r);var i=Math.sin(t),n=Math.cos(t);return o(n,i,-i,n,e-e*n+r*i,r-e*i-r*n)},t.TRANSLATE=function(t,e){return void 0===e&&(e=0),s(t,e),o(1,0,0,1,t,e)},t.SCALE=function(t,e){return void 0===e&&(e=t),s(t,e),o(t,0,0,e,0,0)},t.SKEW_X=function(t){return s(t),o(1,0,Math.atan(t),1,0,0)},t.SKEW_Y=function(t){return s(t),o(1,Math.atan(t),0,1,0,0)},t.X_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),s(t),o(-1,0,0,1,t,0)},t.Y_AXIS_SYMMETRY=function(t){return void 0===t&&(t=0),s(t),o(1,0,0,-1,0,t)},t.A_TO_C=function(){return n((function(t,e,r){return w.ARC===t.type?function(t,e,r){var i,n,s,o;t.cX||u(t,e,r);for(var h=Math.min(t.phi1,t.phi2),c=Math.max(t.phi1,t.phi2)-h,g=Math.ceil(c/90),p=new Array(g),d=e,v=r,y=0;y<g;y++){var m=f(t.phi1,t.phi2,y/g),x=f(t.phi1,t.phi2,(y+1)/g),b=x-m,S=4/3*Math.tan(b*l/4),T=[Math.cos(m*l)-S*Math.sin(m*l),Math.sin(m*l)+S*Math.cos(m*l)],A=T[0],O=T[1],P=[Math.cos(x*l),Math.sin(x*l)],E=P[0],C=P[1],M=[E+S*Math.sin(x*l),C-S*Math.cos(x*l)],N=M[0],_=M[1];p[y]={relative:t.relative,type:w.CURVE_TO};var V=function(e,r){var i=a([e*t.rX,r*t.rY],t.xRot),n=i[0],s=i[1];return[t.cX+n,t.cY+s]};i=V(A,O),p[y].x1=i[0],p[y].y1=i[1],n=V(N,_),p[y].x2=n[0],p[y].y2=n[1],s=V(E,C),p[y].x=s[0],p[y].y=s[1],t.relative&&(p[y].x1-=d,p[y].y1-=v,p[y].x2-=d,p[y].y2-=v,p[y].x-=d,p[y].y-=v),d=(o=[p[y].x,p[y].y])[0],v=o[1]}return p}(t,t.relative?0:e,t.relative?0:r):t}))},t.ANNOTATE_ARCS=function(){return n((function(t,e,r){return t.relative&&(e=0,r=0),w.ARC===t.type&&u(t,e,r),t}))},t.CLONE=function(){return function(t){var e={};for(var r in t)e[r]=t[r];return e}},t.CALCULATE_BOUNDS=function(){var t=e(),a=i(),s=r(),o=n((function(e,r,i){var n=s(a(t(function(t){var e={};for(var r in t)e[r]=t[r];return e}(e))));function c(t){t>o.maxX&&(o.maxX=t),t<o.minX&&(o.minX=t)}function l(t){t>o.maxY&&(o.maxY=t),t<o.minY&&(o.minY=t)}if(n.type&w.DRAWING_COMMANDS&&(c(r),l(i)),n.type&w.HORIZ_LINE_TO&&c(n.x),n.type&w.VERT_LINE_TO&&l(n.y),n.type&w.LINE_TO&&(c(n.x),l(n.y)),n.type&w.CURVE_TO){c(n.x),l(n.y);for(var f=0,v=p(r,n.x1,n.x2,n.x);f<v.length;f++)0<(R=v[f])&&1>R&&c(d(r,n.x1,n.x2,n.x,R));for(var y=0,m=p(i,n.y1,n.y2,n.y);y<m.length;y++)0<(R=m[y])&&1>R&&l(d(i,n.y1,n.y2,n.y,R))}if(n.type&w.ARC){c(n.x),l(n.y),u(n,r,i);for(var x=n.xRot/180*Math.PI,b=Math.cos(x)*n.rX,S=Math.sin(x)*n.rX,T=-Math.sin(x)*n.rY,A=Math.cos(x)*n.rY,O=n.phi1<n.phi2?[n.phi1,n.phi2]:-180>n.phi2?[n.phi2+360,n.phi1+360]:[n.phi2,n.phi1],P=O[0],E=O[1],C=function(t){var e=t[0],r=t[1],i=180*Math.atan2(r,e)/Math.PI;return i<P?i+360:i},M=0,N=h(T,-b,0).map(C);M<N.length;M++)(R=N[M])>P&&R<E&&c(g(n.cX,b,T,R));for(var _=0,V=h(A,-S,0).map(C);_<V.length;_++){var R;(R=V[_])>P&&R<E&&l(g(n.cY,S,A,R))}}return e}));return o.minX=1/0,o.maxX=-1/0,o.minY=1/0,o.maxY=-1/0,o}}(c||(c={}));var v,y=function(){function t(){}return t.prototype.round=function(t){return this.transform(c.ROUND(t))},t.prototype.toAbs=function(){return this.transform(c.TO_ABS())},t.prototype.toRel=function(){return this.transform(c.TO_REL())},t.prototype.normalizeHVZ=function(t,e,r){return this.transform(c.NORMALIZE_HVZ(t,e,r))},t.prototype.normalizeST=function(){return this.transform(c.NORMALIZE_ST())},t.prototype.qtToC=function(){return this.transform(c.QT_TO_C())},t.prototype.aToC=function(){return this.transform(c.A_TO_C())},t.prototype.sanitize=function(t){return this.transform(c.SANITIZE(t))},t.prototype.translate=function(t,e){return this.transform(c.TRANSLATE(t,e))},t.prototype.scale=function(t,e){return this.transform(c.SCALE(t,e))},t.prototype.rotate=function(t,e,r){return this.transform(c.ROTATE(t,e,r))},t.prototype.matrix=function(t,e,r,i,n,a){return this.transform(c.MATRIX(t,e,r,i,n,a))},t.prototype.skewX=function(t){return this.transform(c.SKEW_X(t))},t.prototype.skewY=function(t){return this.transform(c.SKEW_Y(t))},t.prototype.xSymmetry=function(t){return this.transform(c.X_AXIS_SYMMETRY(t))},t.prototype.ySymmetry=function(t){return this.transform(c.Y_AXIS_SYMMETRY(t))},t.prototype.annotateArcs=function(){return this.transform(c.ANNOTATE_ARCS())},t}(),m=function(t){return" "===t||"\t"===t||"\r"===t||"\n"===t},x=function(t){return"0".charCodeAt(0)<=t.charCodeAt(0)&&t.charCodeAt(0)<="9".charCodeAt(0)},b=function(t){function e(){var e=t.call(this)||this;return e.curNumber="",e.curCommandType=-1,e.curCommandRelative=!1,e.canParseCommandOrComma=!0,e.curNumberHasExp=!1,e.curNumberHasExpDigits=!1,e.curNumberHasDecimal=!1,e.curArgs=[],e}return n(e,t),e.prototype.finish=function(t){if(void 0===t&&(t=[]),this.parse(" ",t),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return t},e.prototype.parse=function(t,e){var r=this;void 0===e&&(e=[]);for(var i=function(t){e.push(t),r.curArgs.length=0,r.canParseCommandOrComma=!0},n=0;n<t.length;n++){var a=t[n],s=!(this.curCommandType!==w.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),o=x(a)&&("0"===this.curNumber&&"0"===a||s);if(!x(a)||o)if("e"!==a&&"E"!==a)if("-"!==a&&"+"!==a||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==a||this.curNumberHasExp||this.curNumberHasDecimal||s){if(this.curNumber&&-1!==this.curCommandType){var u=Number(this.curNumber);if(isNaN(u))throw new SyntaxError("Invalid number ending at "+n);if(this.curCommandType===w.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>u)throw new SyntaxError('Expected positive number, got "'+u+'" at index "'+n+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+n+'"');this.curArgs.push(u),this.curArgs.length===S[this.curCommandType]&&(w.HORIZ_LINE_TO===this.curCommandType?i({type:w.HORIZ_LINE_TO,relative:this.curCommandRelative,x:u}):w.VERT_LINE_TO===this.curCommandType?i({type:w.VERT_LINE_TO,relative:this.curCommandRelative,y:u}):this.curCommandType===w.MOVE_TO||this.curCommandType===w.LINE_TO||this.curCommandType===w.SMOOTH_QUAD_TO?(i({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),w.MOVE_TO===this.curCommandType&&(this.curCommandType=w.LINE_TO)):this.curCommandType===w.CURVE_TO?i({type:w.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===w.SMOOTH_CURVE_TO?i({type:w.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===w.QUAD_TO?i({type:w.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===w.ARC&&i({type:w.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!m(a))if(","===a&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==a&&"-"!==a&&"."!==a)if(o)this.curNumber=a,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+n+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==a&&"Z"!==a)if("h"===a||"H"===a)this.curCommandType=w.HORIZ_LINE_TO,this.curCommandRelative="h"===a;else if("v"===a||"V"===a)this.curCommandType=w.VERT_LINE_TO,this.curCommandRelative="v"===a;else if("m"===a||"M"===a)this.curCommandType=w.MOVE_TO,this.curCommandRelative="m"===a;else if("l"===a||"L"===a)this.curCommandType=w.LINE_TO,this.curCommandRelative="l"===a;else if("c"===a||"C"===a)this.curCommandType=w.CURVE_TO,this.curCommandRelative="c"===a;else if("s"===a||"S"===a)this.curCommandType=w.SMOOTH_CURVE_TO,this.curCommandRelative="s"===a;else if("q"===a||"Q"===a)this.curCommandType=w.QUAD_TO,this.curCommandRelative="q"===a;else if("t"===a||"T"===a)this.curCommandType=w.SMOOTH_QUAD_TO,this.curCommandRelative="t"===a;else{if("a"!==a&&"A"!==a)throw new SyntaxError('Unexpected character "'+a+'" at index '+n+".");this.curCommandType=w.ARC,this.curCommandRelative="a"===a}else e.push({type:w.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=a,this.curNumberHasDecimal="."===a}else this.curNumber+=a,this.curNumberHasDecimal=!0;else this.curNumber+=a;else this.curNumber+=a,this.curNumberHasExp=!0;else this.curNumber+=a,this.curNumberHasExpDigits=this.curNumberHasExp}return e},e.prototype.transform=function(t){return Object.create(this,{parse:{value:function(e,r){void 0===r&&(r=[]);for(var i=0,n=Object.getPrototypeOf(this).parse.call(this,e);i<n.length;i++){var a=n[i],s=t(a);Array.isArray(s)?r.push.apply(r,s):r.push(s)}return r}}})},e}(y),w=function(t){function e(r){var i=t.call(this)||this;return i.commands="string"==typeof r?e.parse(r):r,i}return n(e,t),e.prototype.encode=function(){return e.encode(this.commands)},e.prototype.getBounds=function(){var t=c.CALCULATE_BOUNDS();return this.transform(t),t},e.prototype.transform=function(t){for(var e=[],r=0,i=this.commands;r<i.length;r++){var n=t(i[r]);Array.isArray(n)?e.push.apply(e,n):e.push(n)}return this.commands=e,this},e.encode=function(t){return function(t){var e="";Array.isArray(t)||(t=[t]);for(var r=0;r<t.length;r++){var i=t[r];if(i.type===w.CLOSE_PATH)e+="z";else if(i.type===w.HORIZ_LINE_TO)e+=(i.relative?"h":"H")+i.x;else if(i.type===w.VERT_LINE_TO)e+=(i.relative?"v":"V")+i.y;else if(i.type===w.MOVE_TO)e+=(i.relative?"m":"M")+i.x+" "+i.y;else if(i.type===w.LINE_TO)e+=(i.relative?"l":"L")+i.x+" "+i.y;else if(i.type===w.CURVE_TO)e+=(i.relative?"c":"C")+i.x1+" "+i.y1+" "+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===w.SMOOTH_CURVE_TO)e+=(i.relative?"s":"S")+i.x2+" "+i.y2+" "+i.x+" "+i.y;else if(i.type===w.QUAD_TO)e+=(i.relative?"q":"Q")+i.x1+" "+i.y1+" "+i.x+" "+i.y;else if(i.type===w.SMOOTH_QUAD_TO)e+=(i.relative?"t":"T")+i.x+" "+i.y;else{if(i.type!==w.ARC)throw new Error('Unexpected command type "'+i.type+'" at index '+r+".");e+=(i.relative?"a":"A")+i.rX+" "+i.rY+" "+i.xRot+" "+ +i.lArcFlag+" "+ +i.sweepFlag+" "+i.x+" "+i.y}}return e}(t)},e.parse=function(t){var e=new b,r=[];return e.parse(t,r),e.finish(r),r},e.CLOSE_PATH=1,e.MOVE_TO=2,e.HORIZ_LINE_TO=4,e.VERT_LINE_TO=8,e.LINE_TO=16,e.CURVE_TO=32,e.SMOOTH_CURVE_TO=64,e.QUAD_TO=128,e.SMOOTH_QUAD_TO=256,e.ARC=512,e.LINE_COMMANDS=e.LINE_TO|e.HORIZ_LINE_TO|e.VERT_LINE_TO,e.DRAWING_COMMANDS=e.HORIZ_LINE_TO|e.VERT_LINE_TO|e.LINE_TO|e.CURVE_TO|e.SMOOTH_CURVE_TO|e.QUAD_TO|e.SMOOTH_QUAD_TO|e.ARC,e}(y),S=((v={})[w.MOVE_TO]=2,v[w.LINE_TO]=2,v[w.HORIZ_LINE_TO]=1,v[w.VERT_LINE_TO]=1,v[w.CLOSE_PATH]=0,v[w.QUAD_TO]=4,v[w.SMOOTH_QUAD_TO]=2,v[w.CURVE_TO]=6,v[w.SMOOTH_CURVE_TO]=4,v[w.ARC]=7,v)},function(t,e,r){"use strict";var i=r(152),n=r(183).PROPER,a=r(165),s=r(156),o=r(176),u=r(161),h=r(154),c=r(224),l=RegExp.prototype,f=l.toString,g=i(c),p=h((function(){return"/a/b"!=f.call({source:"a",flags:"b"})})),d=n&&"toString"!=f.name;(p||d)&&a(RegExp.prototype,"toString",(function(){var t=s(this),e=u(t.source),r=t.flags;return"/"+e+"/"+u(void 0===r&&o(l,t)&&!("flags"in l)?g(t):r)}),{unsafe:!0})},function(t,e,r){"use strict";function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}r.d(e,"a",(function(){return o}));var n=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],a=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function s(t,e,r,n,a){if("string"==typeof t&&(t=document.getElementById(t)),!t||"object"!==i(t)||!("getContext"in t))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var s=t.getContext("2d");try{return s.getImageData(e,r,n,a)}catch(t){throw new Error("unable to access image data: "+t)}}function o(t,e,r,i,o,h){if(!(isNaN(h)||h<1)){h|=0;var c=s(t,e,r,i,o);c=function(t,e,r,i,s,o){for(var h,c=t.data,l=2*o+1,f=i-1,g=s-1,p=o+1,d=p*(p+1)/2,v=new u,y=v,m=1;m<l;m++)y=y.next=new u,m===p&&(h=y);y.next=v;for(var x=null,b=null,w=0,S=0,T=n[o],A=a[o],O=0;O<s;O++){y=v;for(var P=c[S],E=c[S+1],C=c[S+2],M=c[S+3],N=0;N<p;N++)y.r=P,y.g=E,y.b=C,y.a=M,y=y.next;for(var _=0,V=0,R=0,k=0,I=p*P,L=p*E,D=p*C,B=p*M,j=d*P,z=d*E,F=d*C,U=d*M,H=1;H<p;H++){var X=S+((f<H?f:H)<<2),Y=c[X],q=c[X+1],W=c[X+2],G=c[X+3],Q=p-H;j+=(y.r=Y)*Q,z+=(y.g=q)*Q,F+=(y.b=W)*Q,U+=(y.a=G)*Q,_+=Y,V+=q,R+=W,k+=G,y=y.next}x=v,b=h;for(var $=0;$<i;$++){var Z=U*T>>A;if(c[S+3]=Z,0!==Z){var K=255/Z;c[S]=(j*T>>A)*K,c[S+1]=(z*T>>A)*K,c[S+2]=(F*T>>A)*K}else c[S]=c[S+1]=c[S+2]=0;j-=I,z-=L,F-=D,U-=B,I-=x.r,L-=x.g,D-=x.b,B-=x.a;var J=$+o+1;J=w+(J<f?J:f)<<2,_+=x.r=c[J],V+=x.g=c[J+1],R+=x.b=c[J+2],k+=x.a=c[J+3],j+=_,z+=V,F+=R,U+=k,x=x.next;var tt=b,et=tt.r,rt=tt.g,it=tt.b,nt=tt.a;I+=et,L+=rt,D+=it,B+=nt,_-=et,V-=rt,R-=it,k-=nt,b=b.next,S+=4}w+=i}for(var at=0;at<i;at++){var st=c[S=at<<2],ot=c[S+1],ut=c[S+2],ht=c[S+3],ct=p*st,lt=p*ot,ft=p*ut,gt=p*ht,pt=d*st,dt=d*ot,vt=d*ut,yt=d*ht;y=v;for(var mt=0;mt<p;mt++)y.r=st,y.g=ot,y.b=ut,y.a=ht,y=y.next;for(var xt=i,bt=0,wt=0,St=0,Tt=0,At=1;At<=o;At++){S=xt+at<<2;var Ot=p-At;pt+=(y.r=st=c[S])*Ot,dt+=(y.g=ot=c[S+1])*Ot,vt+=(y.b=ut=c[S+2])*Ot,yt+=(y.a=ht=c[S+3])*Ot,Tt+=st,bt+=ot,wt+=ut,St+=ht,y=y.next,At<g&&(xt+=i)}S=at,x=v,b=h;for(var Pt=0;Pt<s;Pt++){var Et=S<<2;c[Et+3]=ht=yt*T>>A,ht>0?(ht=255/ht,c[Et]=(pt*T>>A)*ht,c[Et+1]=(dt*T>>A)*ht,c[Et+2]=(vt*T>>A)*ht):c[Et]=c[Et+1]=c[Et+2]=0,pt-=ct,dt-=lt,vt-=ft,yt-=gt,ct-=x.r,lt-=x.g,ft-=x.b,gt-=x.a,Et=at+((Et=Pt+p)<g?Et:g)*i<<2,pt+=Tt+=x.r=c[Et],dt+=bt+=x.g=c[Et+1],vt+=wt+=x.b=c[Et+2],yt+=St+=x.a=c[Et+3],x=x.next,ct+=st=b.r,lt+=ot=b.g,ft+=ut=b.b,gt+=ht=b.a,Tt-=st,bt-=ot,wt-=ut,St-=ht,b=b.next,S+=i}}return t}(c,0,0,i,o,h),t.getContext("2d").putImageData(c,e,r)}}var u=function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}}])]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,